[{"/usr/src/app/src/index.js":"1","/usr/src/app/src/App.js":"2","/usr/src/app/src/reportWebVitals.js":"3","/usr/src/app/src/Components/Context.js":"4","/usr/src/app/src/Components/LandingPage.js":"5","/usr/src/app/src/Components/SignupForm.js":"6","/usr/src/app/src/Components/PublicSpells.js":"7","/usr/src/app/src/Components/NotFound.js":"8","/usr/src/app/src/Components/LoginForm.js":"9","/usr/src/app/src/Components/UserProfile.js":"10","/usr/src/app/src/Services/auth-api-service.js":"11","/usr/src/app/src/Services/spells-api-service.js":"12","/usr/src/app/src/Services/token-service.js":"13","/usr/src/app/src/Components/Dashboard/SpellIndex.js":"14","/usr/src/app/src/Components/Dashboard/Dashboard.js":"15","/usr/src/app/src/Components/Dashboard/SpellDetails.js":"16","/usr/src/app/src/Components/Dashboard/Downloads.js":"17","/usr/src/app/src/config.js":"18","/usr/src/app/src/styles.js":"19","/usr/src/app/src/Util.js":"20","/usr/src/app/src/Components/Spellbook.js":"21","/usr/src/app/src/Components/Header.js":"22","/usr/src/app/src/Components/Dashboard/Title.js":"23","/usr/src/app/src/Components/Dashboard/ListItems.js":"24","/usr/src/app/src/Components/Dashboard/SpellChart.js":"25","/usr/src/app/src/Components/Dashboard/FabAddIcon.js":"26","/usr/src/app/src/Components/Dashboard/DownloadCard.js":"27","/usr/src/app/src/Components/Dashboard/SpellChartHeader.js":"28","/usr/src/app/src/Components/Spellcard.js":"29","/usr/src/app/src/Components/Docs/Docs.js":"30"},{"size":666,"mtime":1621367425000,"results":"31","hashOfConfig":"32"},{"size":3982,"mtime":1621983285000,"results":"33","hashOfConfig":"32"},{"size":362,"mtime":1621367425000,"results":"34","hashOfConfig":"32"},{"size":1339,"mtime":1621367425000,"results":"35","hashOfConfig":"32"},{"size":1999,"mtime":1621367425000,"results":"36","hashOfConfig":"32"},{"size":4242,"mtime":1621367425000,"results":"37","hashOfConfig":"32"},{"size":1569,"mtime":1621892389000,"results":"38","hashOfConfig":"32"},{"size":309,"mtime":1621367425000,"results":"39","hashOfConfig":"32"},{"size":3567,"mtime":1621367425000,"results":"40","hashOfConfig":"32"},{"size":1698,"mtime":1621892389000,"results":"41","hashOfConfig":"32"},{"size":2299,"mtime":1621367425000,"results":"42","hashOfConfig":"32"},{"size":4755,"mtime":1621892389000,"results":"43","hashOfConfig":"32"},{"size":1603,"mtime":1621367425000,"results":"44","hashOfConfig":"32"},{"size":2163,"mtime":1621367425000,"results":"45","hashOfConfig":"32"},{"size":5679,"mtime":1621367425000,"results":"46","hashOfConfig":"32"},{"size":14000,"mtime":1621892389000,"results":"47","hashOfConfig":"32"},{"size":2517,"mtime":1621892389000,"results":"48","hashOfConfig":"32"},{"size":259,"mtime":1621367425000,"results":"49","hashOfConfig":"32"},{"size":10843,"mtime":1621892389000,"results":"50","hashOfConfig":"32"},{"size":1700,"mtime":1621983191000,"results":"51","hashOfConfig":"32"},{"size":862,"mtime":1621367425000,"results":"52","hashOfConfig":"32"},{"size":1021,"mtime":1621367425000,"results":"53","hashOfConfig":"32"},{"size":342,"mtime":1621367425000,"results":"54","hashOfConfig":"32"},{"size":4420,"mtime":1621892389000,"results":"55","hashOfConfig":"32"},{"size":15417,"mtime":1621892389000,"results":"56","hashOfConfig":"32"},{"size":1074,"mtime":1621367425000,"results":"57","hashOfConfig":"32"},{"size":2262,"mtime":1621892389000,"results":"58","hashOfConfig":"32"},{"size":2934,"mtime":1621367425000,"results":"59","hashOfConfig":"32"},{"size":7351,"mtime":1621367425000,"results":"60","hashOfConfig":"32"},{"size":1556,"mtime":1621983267000,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"65"},"1xvdtr3",{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"65"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"65"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"65"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"65"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"65"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"65"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"65"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"65"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"65"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"65"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"65"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"65"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"65"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"65"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"65"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"65"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"65"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"65"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/usr/src/app/src/index.js",["142"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {SpellContextProvider} from './Components/Context';\n\nReactDOM.render(\n  // <SpellContextProvider>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>,\n  // </SpellContextProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["143","144"],"/usr/src/app/src/App.js",["145","146","147"],"/usr/src/app/src/reportWebVitals.js",[],"/usr/src/app/src/Components/Context.js",["148","149","150","151","152","153","154","155","156"],"import React, { useEffect, useState } from 'react';\nimport TokenService from '../Services/token-service';\nimport config from '../config';\nimport { useHistory } from \"react-router-dom\";\nimport SpellsApiService from '../Services/spells-api-service';\n\n// Spells that will be needed:\n// 1) User specific spells\n// 2) Public spells\n\n//Spells\nconst SpellContext = React.createContext({});\n\nexport function SpellContextProvider(props) {\n  let history = useHistory();\n  const [userSpells, setUserSpells] = useState([])\n  const [publicSpells, setPublicSpells] = useState([])\n  const [spells, setSpells] = useState([])\n  \n  useEffect(() => {\n    SpellsApiService.getSpellsByUser()\n      .then(spells => setUserSpells(spells))\n  }, [])\n  \n  return (\n    <SpellContext.Provider value={{ userSpells }}>\n      {props.children}\n    </SpellContext.Provider>\n  );\n}\n\nexport const useSpellContext = () => React.useContext(SpellContext);\n\n// Needed user data:\n// Username\n\n//User data\nconst UserContext = React.createContext({});\n\nexport function UserContextProvider(props) {\n  let history = useHistory();\n\n  const [user, setUser] = useState([])\n  \n  useEffect(() => {\n\n  }, [])\n  \n  return (\n    <UserContext.Provider value={{ user }}>\n      {props.children}\n    </UserContext.Provider>\n  );\n}\n\nexport const useContext = () => React.useContext(UserContext);","/usr/src/app/src/Components/LandingPage.js",["157","158","159"],"import React, { useEffect, useState } from 'react';\nimport { Switch, Route, Link, useHistory } from \"react-router-dom\";\nimport Header from './Header';\nimport Button from '@material-ui/core/Button';\nimport useStyles from '../styles.js';\n\nconst LandingPage = (props) => {\n  let history = useHistory();\n  const classes = useStyles();\n\n  // If user has an auth token, send them to dashboard\n  if (props.isLoggedIn){\n    history.push('/spells')\n  }\n\n  return (\n    <>\n      <Route\n        path={'/'}\n        component={Header}\n      />\n      <div className={classes.landingDisplay}>\n        <div>\n          <h1>\n            CodeSpells Spell Sharing\n          </h1>\n        </div>\n        <div className={classes.landingIntro}>\n          <p>\n            Welcome to the CodeSpells Spell Sharing Server!\n          </p>\n          \n          <p>\n            Witches and wizards can use this Spell Sharing Server to save, organize, and share their favorite spells.\n            Spells made public on this server can be executed on our <a href='https://www.twitch.tv/codespells'>live Twitch dev stream </a> \n              by typing <code>!!run &lt;spell-id&gt;</code>  into chat after spawning a mini with <code>!!mini</code>.\n          </p>\n\n          <p>\n            To find a current list of functions that can be executed in the CodeSpells Twitch chat, \n              check out the documentation <a href='https://docs.racket-lang.org/codespells-live/index.html'>here</a>.\n          </p>\n\n          <p>\n            The Spell Sharing Server is still under development. Bugs can be reported in the Github \n              repository <a href='https://github.com/srfoster/codespells-spell-sharing-front-end'>here</a>. \n           </p>\n          <Link to='/signup' >\n            <Button variant=\"contained\" color=\"primary\">\n              Create Account\n            </Button>\n            {/* <button>Create Account</button> */}\n          </Link>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default LandingPage;","/usr/src/app/src/Components/SignupForm.js",["160"],"import React, { useEffect, useState } from 'react';\nimport { Link, Route } from \"react-router-dom\";\nimport AuthApiService from '../Services/auth-api-service';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Header from './Header';\nimport useStyles from '../styles.js';\n\nconst SignupForm = (props) => {\n  const classes = useStyles();\n  let usernameInput = React.createRef()\n  let passwordInput = React.createRef()\n  let passConfirmInput = React.createRef()\n  const [error, setError] = useState(null);\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n\n    if(passwordInput.current.value !== passConfirmInput.current.value){\n      setError(\"Password do not match\");\n      return;\n    }\n\n    AuthApiService.postUser({\n      username: usernameInput.current.value,\n      password: passwordInput.current.value,\n    })\n      .then(user => {\n        usernameInput.current.value = ''\n        passwordInput.current.value = ''\n        passConfirmInput.current.value = ''\n        handleSignupSuccess()\n      })\n      .catch(res => {\n        setError(res.error);\n      })\n  }\n  \n    const handleSignupSuccess = () => {\n      const { history } = props\n      history.push('/login')\n    }\n\n    return (\n    <>\n      <Route\n        path={'/'}\n        component={Header}\n      />\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <div className={classes.signupFormPaper}>\n          <Avatar className={classes.signupFormAvatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign up\n          </Typography>\n          <form className={classes.signupFormForm} noValidate>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <TextField\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  id=\"username\"\n                  label=\"Username\"\n                  name=\"username\"\n                  autoComplete=\"username\"\n                  inputRef={usernameInput}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  name=\"password\"\n                  label=\"Password\"\n                  type=\"password\"\n                  id=\"password\"\n                  autoComplete=\"current-password\"\n                  inputRef={passwordInput}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  name=\"confirm-password\"\n                  label=\"Confirm Password\"\n                  type=\"password\"\n                  id=\"confirm-password\"\n                  autoComplete=\"current-password\"\n                  inputRef={passConfirmInput}\n                />\n              </Grid>\n            </Grid>\n            <div role='alert'>\n              {error ? <p className='red'>{error}</p> : null}\n            </div>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.signupFormSubmit}\n              onClick={(e) => handleSubmit(e)}\n            >\n              Sign Up\n            </Button>\n            <Grid container justify=\"flex-end\">\n              <Grid item>\n                <Link to={'/login'} variant=\"body2\">\n                  Already have an account? Sign in\n                </Link>\n              </Grid>\n            </Grid>\n          </form>\n        </div>\n        {/* <Box mt={5}>\n          <Copyright />\n        </Box> */}\n      </Container>\n    </>\n  )\n}\n\nSignupForm.defaultProps = {\n  location: {},\n  history: {\n    push: () => {},\n  },\n}\n\nexport default SignupForm;","/usr/src/app/src/Components/PublicSpells.js",["161","162"],"import React, { useEffect, useState } from 'react';\nimport Title from './Dashboard/Title';\nimport SpellsApiService from '../Services/spells-api-service';\nimport Spellbook from './Spellbook';\nimport Pagination from '@material-ui/lab/Pagination';\nimport {SearchBar} from '../Util.js'\nimport useStyles from '../styles.js';\n\nexport default function PublicSpells(props) {\n  // console.log(\"From index: \", props);\n  const [spells, setSpells] = useState([])\n  const classes = useStyles();\n  const [rowsPerPage, setRowsPerPage] = React.useState(9);\n  const [totalSpells, setTotalSpells] = React.useState(0);\n  const [currentPage, setCurrentPage] = useState(1)\n  const [search, setSearch] = React.useState('');\n\n  useEffect(() => {\n    let isMounted = true\n    SpellsApiService.getPublicSpells(currentPage, search)\n      .then(spells => {\n        if(isMounted){\n          setSpells(spells.spells)\n          setTotalSpells(spells.total)\n        }\n      })\n    return () => {\n      isMounted = false\n    }\n  }, [currentPage, search])\n\n  return (\n    <>\n      <div className={classes.headBar}>\n        <div className={classes.headLeft}></div>\n        <h4 className={classes.headTitle}>Public Spells</h4>\n        <div className={classes.headRight}><SearchBar setSearch={setSearch} setCurrentPage={setCurrentPage}/></div>\n      </div>\n      <Spellbook spells={spells}/>\n      <div className={classes.publicSpellsRoot}>\n        <Pagination count={Math.ceil(totalSpells / rowsPerPage)}\n          onChange={(event, page) => {setCurrentPage(page)}}\n        />\n      </div>\n    </>\n  );\n}","/usr/src/app/src/Components/NotFound.js",[],"/usr/src/app/src/Components/LoginForm.js",["163"],"import React, { useState } from 'react';\nimport { Link, Route } from \"react-router-dom\";\nimport AuthApiService from '../Services/auth-api-service';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Header from './Header';\nimport useStyles from '../styles.js';\n\nconst LoginForm = (props) => {\n  const classes = useStyles();\n  let usernameInput = React.createRef()\n  let passwordInput = React.createRef()\n  const [error, setError] = useState(null);\n\n  const handleSubmitJwtAuth = (e) => {\n    e.preventDefault()\n\n    AuthApiService.postLogin({\n      username: usernameInput.current.value,\n      password: passwordInput.current.value,\n    })\n      .then(user => {\n        usernameInput.current.value = ''\n        passwordInput.current.value = ''\n        // props.onLoginSuccess()\n        handleLoginSuccess()\n      })\n      .catch(res => {\n        setError(res.error);\n      })\n    }\n\n    const handleLoginSuccess = () => {\n      const { history } = props\n      history.push('/spells')\n    }\n\n    return (\n    <>\n      <Route\n        path={'/'}\n        component={Header}\n      />\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <div className={classes.loginFormPaper}>\n          <Avatar className={classes.loginFormAvatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n          <form className={classes.loginFormForm} noValidate>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"username\"\n              label=\"Username\"\n              name=\"username\"\n              autoComplete=\"username\"\n              autoFocus\n              inputRef={usernameInput}\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n              inputRef={passwordInput}\n            />\n            <div role='alert'>\n              {error ? <p className='red'>{error}</p> : null}\n            </div>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.loginFormSubmit}\n              onClick={(e) => handleSubmitJwtAuth(e)}\n            >\n              Sign In\n            </Button>\n            <Grid container>\n              <Grid item xs>\n                {/* <Link href=\"#\" variant=\"body2\">\n                  Forgot password?\n                </Link> */}\n              </Grid>\n              <Grid item>\n                <Link to={'/signup'} variant=\"body2\">\n                  {\"Don't have an account? Sign Up\"}\n                </Link>\n              </Grid>\n            </Grid>\n          </form>\n        </div>\n      </Container>\n    </>\n  )\n};\n\nLoginForm.defaultProps = {\n  location: {},\n  history: {\n    push: () => {},\n  },\n}\n\nexport default LoginForm;","/usr/src/app/src/Components/UserProfile.js",["164","165","166"],"import React, { useEffect, useState } from 'react';\nimport Title from './Dashboard/Title';\nimport SpellsApiService from '../Services/spells-api-service';\nimport Spellbook from './Spellbook';\nimport Pagination from '@material-ui/lab/Pagination';\nimport {SearchBar} from '../Util.js'\nimport useStyles from '../styles.js';\n\nconst UserProfile = (props) => {\n  const classes = useStyles();\n  const [user, setUser] = useState(undefined)\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [currentPage, setCurrentPage] = useState(1)\n  const [search, setSearch] = React.useState('');\n\n  let path = window.location.pathname\n\n  useEffect(() => {\n    let isMounted = true\n    const { id } = props.match.params\n\n    SpellsApiService.getUserById(id, currentPage, search)\n      .then(user => {\n        if(isMounted) setUser(user)\n      })\n      return () => {\n        isMounted = false\n      }\n  },[currentPage, search, path])\n\n  return (\n    user ?\n      <>\n        <div className={classes.userProfileHeadBar}>\n          <div className={classes.userProfileHeadLeft}></div>\n          <div className={classes.userProfileHeadTitle}>{`Spellbook of ${user.username}`}</div>\n          <div className={classes.userProfileHeadRight}>\n            <SearchBar \n              setSearch={setSearch}\n              setCurrentPage={setCurrentPage}\n            />\n          </div>\n        </div>\n\n        <Spellbook spells={user.spells}/>\n        \n        <div className={classes.userProfileRoot}>\n          <Pagination count={Math.ceil(user.total / rowsPerPage)}\n            onChange={(event, page) => {setCurrentPage(page)}}\n          />\n        </div>\n      </>\n    : ''\n  );\n};\n\nexport default UserProfile;\n","/usr/src/app/src/Services/auth-api-service.js",[],"/usr/src/app/src/Services/spells-api-service.js",[],"/usr/src/app/src/Services/token-service.js",[],"/usr/src/app/src/Components/Dashboard/SpellIndex.js",[],"/usr/src/app/src/Components/Dashboard/Dashboard.js",["167"],"import React, { useEffect, useState } from 'react';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport {PublicListItems, PrivateListItems} from './ListItems';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport clsx from 'clsx';\nimport CodeSpells from '../../Assets/CodeSpells.png';\nimport Link from '@material-ui/core/Link';\nimport SpellsApiService from '../../Services/spells-api-service';\n// import useStyles from '../../styles.js';\nimport { makeStyles} from '@material-ui/core/styles';\n\nfunction Dashboard(props) {\n  const classes = useStyles();\n  const [isLoggedIn, setIsLoggedIn] = useState(undefined);\n  const [open, setOpen] = React.useState(false);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n  const fixedHeightPaper = clsx(classes.dashPaper, classes.fixedHeight);\n\n  useEffect(() => {\n    // Only running this to check if logged in\n    SpellsApiService.getUserById('me')\n      .then((user) => setIsLoggedIn(true))\n      .catch(() => setIsLoggedIn(false))\n  }, [])\n\n  return (\n    isLoggedIn === undefined ?\n    '': \n    <div className={classes.dashRoot}>\n      <CssBaseline />\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            className={clsx(classes.dashMenuButton, open && classes.dashMenuButtonHidden)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.dashTitle}>\n            {/* Admin */}\n          </Typography>\n          <Link href='https://codespells.org/index.html' className={classes.link}>\n            <img src={CodeSpells} alt=\"CodeSpells\" width=\"100%\"></img>\n          </Link>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        classes={{\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n        }}\n        open={open}\n      >\n        <div className={classes.toolbarIcon}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          {isLoggedIn ? <PublicListItems/> : <PrivateListItems/>}\n        </List>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.dashContainer}>\n          <Grid container spacing={3}>\n            {/* Spell List */}\n            <Grid item xs={12}>\n              <Paper className={classes.dashPaper}>\n                {props.child}\n              </Paper>\n            </Grid>\n          </Grid>\n          {/* Inserts relevant fab icon by page */}\n          {isLoggedIn ? props.fabIcon : ''}\n        </Container>\n      </main>\n    </div>\n  )\n}\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  dashRoot: {\n    display: 'flex',\n  },\n  toolbar: {\n    paddingRight: 24, // keep right padding when drawer closed\n  },\n  toolbarIcon: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  dashMenuButton: {\n    marginRight: 36,\n  },\n  dashMenuButtonHidden: {\n    display: 'none',\n  },\n  dashTitle: {\n    flexGrow: 1,\n  },\n  drawerPaper: {\n    position: 'relative',\n    whiteSpace: 'nowrap',\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerPaperClose: {\n    overflowX: 'hidden',\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: theme.spacing(7),\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9),\n    },\n  },\n  appBarSpacer: {\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'flex-end',\n  padding: theme.spacing(0, 1),\n  ...theme.mixins.toolbar,},\n  content: {\n    flexGrow: 1,\n    height: '100vh',\n    overflow: 'auto',\n  },\n  dashContainer: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  dashPaper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column',\n  },\n  fixedHeight: {\n    height: 240,\n  },\n  link: {\n    width: '10%',\n  }\n}));\n\nexport default Dashboard;\n","/usr/src/app/src/Components/Dashboard/SpellDetails.js",["168","169","170","171","172","173","174","175","176"],"import React, { useEffect, useState } from 'react';\nimport { useHistory, useParams, Prompt } from \"react-router-dom\";\nimport TokenService from '../../Services/token-service';\nimport config from '../../config';\nimport Title from './Title';\nimport TextField from '@material-ui/core/TextField';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport IconButton from '@material-ui/core/IconButton';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport Button from '@material-ui/core/Button';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport SpellsApiService from '../../Services/spells-api-service';\nimport Chip from '@material-ui/core/Chip';\nimport LockIcon from '@material-ui/icons/Lock';\nimport useStyles from '../../styles.js';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CodeMirror from 'codemirror';\nimport {UnControlled as ReactCodeMirror} from 'react-codemirror2';\nimport 'codemirror/addon/edit/matchbrackets.js'\nimport 'codemirror/addon/edit/closebrackets.js'\nimport 'codemirror/addon/selection/active-line.js'\nimport CallSplitIcon from '@material-ui/icons/CallSplit';\n\n\nlet debounceTimer\n\nexport default function SpellDetails(props) {\n  const classes = useStyles();\n  let history = useHistory();\n\n  const [spell, setSpell] = useState();\n  const [isSaving, setIsSaving] = useState(false);\n  // FIXME: CodeMirror re-render workaround. Needs revision\n  const [spellText, setSpellText] = useState(undefined)\n  const [open, setOpen] = React.useState(false);\n  const [spellToDelete, setSpellToDelete] = React.useState(undefined);\n  const [value, setValue] = React.useState(\"\");\n  const [inputValue, setInputValue] = React.useState('');\n  const [spellTag, setSpellTag] = useState(\"\");\n  const [userOwnsSpell, setUserOwnsSpell] = useState()\n  const [error, setError] = useState(null);\n\n  let debounceWait = 2000;\n  let spinnerShow = 1000;\n  \n  const handleClickOpen = (id) => {\n    setSpellToDelete(id);\n  };\n\n  const handleClose = (id) => {\n    setSpellToDelete(undefined);\n  };\n\n  const { id } = useParams();\n  const path = window.location.pathname;\n  \n  useEffect(() => {\n    let isMounted = true\n\n    SpellsApiService.checkForSpellOwnership(id)\n      .then(res => {\n        setUserOwnsSpell(res.userOwnsSpell)\n      })\n    \n    SpellsApiService.getSpellById(id)\n      .then(spell => {\n        if (isMounted) {\n          // console.log(\"spell\" , spell)\n          setSpell(spell)\n          setSpellText(spell.text);\n        }\n      })\n      .catch(res => {\n        setError(res.error);\n      })\n\n    return () => {\n      isMounted = false\n    }\n\n  }, [path, id])\n\n  const debounce = (func, delay) => {\n    // setIsSaving(true);\n    clearTimeout(debounceTimer)\n    debounceTimer = setTimeout(() => func(), delay)\n  }\n\n  const tagWhitelist = [\n  { title: 'Fire'},\n  { title: 'Ice'},\n  { title: 'Water'},\n  { title: 'Deception'},\n  { title: 'Plant'},\n  { title: \"Rock\"},\n  { title: 'Pet'},\n  { title: 'Parasite'},\n  { title: 'Electric'},\n  { title: 'Attack'},\n  { title: 'Heal'}\n  ]\n\n  const updateSpell = (spell) => {\n    setIsSaving(true);\n\n    let payload = spell\n\n    return fetch(`${config.API_ENDPOINT}/spells/${id}`, {\n      method: 'PUT',\n      headers: {\n        'content-type': 'application/json',\n        'authorization': `bearer ${TokenService.getAuthToken()}`,\n      },\n      body: JSON.stringify(payload)\n    })\n      .then(res =>\n        (!res.ok)\n          ? res.json().then(e => Promise.reject(e))\n          : res.json()\n      )\n      .then((spell) => {\n        setTimeout(() => {  setIsSaving(false); }, spinnerShow);\n        // setIsSaving(false)\n        setSpell(spell)\n      })\n      .catch(errors => \n        console.log(\"UpdateSpell errors\" , errors))\n  }\n\n  function deleteSpells(id){\n\n    return fetch(`${config.API_ENDPOINT}/spells/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'content-type': 'application/json',\n        'authorization': `bearer ${TokenService.getAuthToken()}`,\n      },\n    })\n      .then(res =>\n        (!res.ok)\n          ? res.json().then(e => Promise.reject(e))\n          : res.json()\n      )\n      .catch(errors => \n        console.log(\"deleteSpell errors\" , errors))\n  }\n\n  function addTagToSpell(id,tag){\n\n    return fetch(`${config.API_ENDPOINT}/spells/${id}/tags/${tag}`, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        'authorization': `bearer ${TokenService.getAuthToken()}`,\n      },\n      // body: JSON.stringify(payload)\n    })\n      .then(res =>\n        (!res.ok)\n          ? res.json().then(e => Promise.reject(e))\n          : res.json()\n      )\n      .then((tag) => {\n        setIsSaving(false)\n        setSpell({...spell, tags:[...spell.tags, tag]})\n      })\n      .catch(errors => \n        console.log(\"add tag errors\" , errors))\n  }\n\n  //Press enter to save tag\n  function handleKeyUp(event) {\n    if(event.keyCode === 13 && spellTag) {\n        addTagToSpell(spell.id, spellTag)\n        setSpellTag(\"\")\n    }\n  }\n\n  function removeTagFromSpell(id,tag_name){\n    return fetch(`${config.API_ENDPOINT}/spells/${id}/tags/${tag_name}`, {\n      method: 'DELETE',\n      headers: {\n        'content-type': 'application/json',\n        'authorization': `bearer ${TokenService.getAuthToken()}`,\n      },\n    })\n      .then(res =>\n        (!res.ok)\n          ? res.json().then(e => Promise.reject(e))\n          : res.json()\n      )\n      .then((tag) => {\n        setIsSaving(false)\n        setSpell({...spell, tags: spell.tags.filter(t => {\n          return t.name !== tag_name\n        })})\n      })\n      .catch(errors => \n        console.log(\"remove tag errors\" , errors))\n  }\n\n  const clickForkIcon = (id) => {\n    // console.log(\"Before API \", id);\n    SpellsApiService.forkSpellById(id)\n    .then((spell) => {\n      history.push(`/spells/${spell.id}`)\n      // console.log(\"After history \", spell.id);\n      // console.log(object);\n    })\n  }\n\n  return (\n    <>\n    <Prompt \n      when={isSaving}\n      message='Spell is not saved yet'\n    />\n      {spell ?\n      <div>\n        <div className={classes.titleRow}>\n          <div className={classes.metaID}>ID: {spell.id}</div>\n          <div className={classes.metaTitle}>\n            <Title>\n              {spell.name}\n            </Title>\n          </div>\n          <div className={classes.metaSpinner}>\n            {spell.locked || !userOwnsSpell ?\n              '' :\n              isSaving ? \n                <div className={classes.spinner}>\n                  <CircularProgress size={30} />\n                </div> : \n                <div className={classes.spinner}><CheckIcon />\n                </div>\n            }\n          </div>\n        </div>\n        <p></p>\n        <div className={classes.iconRow}>\n          {spell.locked || !userOwnsSpell ? \n            <TextField className={classes.spellDetailsTitle}\n              id = \"spell-details-title\"\n              label=\"Name\"\n              defaultValue={spell.name}\n              disabled\n            /> :\n            <TextField className={classes.spellDetailsTitle}\n              id = \"spell-details-title-owns\"\n              label=\"Name\"\n              defaultValue={spell.name}\n              onChange={(event) => {\n                setSpell({...spell, name: event.target.value})\n                setTimeout(() => {\n                  debounce(() => updateSpell({...spell, name: event.target.value}), debounceWait)\n                },500)\n              }}\n            />\n          }\n          <div className={classes.spellDetailsImage}>\n            <img src='https://i.imgur.com/VE9Aksf.jpg' alt=\"Spell Image\" width='40%'></img>\n          </div>\n          <div className={classes.iconBox}>\n            <div className={classes.spellDetailsIcons}>\n              <Tooltip title=\"Fork Spell\" placement=\"top\">\n                <IconButton onClick={() => clickForkIcon(spell.id)}>\n                  <CallSplitIcon />\n                </IconButton>\n              </Tooltip>\n              {spell.locked || !userOwnsSpell ?\n                <Tooltip title=\"Spell Locked\" placement=\"top\">\n                  <IconButton >    \n                    <LockIcon />\n                  </IconButton>\n                </Tooltip> \n                :\n                <>\n                <Tooltip title=\"Public status\" placement=\"top-end\">\n                  <IconButton  aria-label=\"isPublic\" onClick={() => {\n                    setSpell({...spell, is_public: !spell.is_public})\n                    debounce(() => updateSpell({...spell, is_public: !spell.is_public}), debounceWait)\n                  }}>\n                    {spell.is_public ? <VisibilityIcon /> : <VisibilityOffIcon />}\n                  </IconButton>\n                </Tooltip>\n                <Tooltip title=\"Delete\" placement=\"top-end\">\n                  <IconButton  aria-label=\"delete\"\n                    onClick={() => handleClickOpen(spell.id)}\n                  >\n                    <DeleteForeverIcon />\n                  </IconButton>\n                </Tooltip>\n                </>\n              }\n            </div>\n          </div>\n        </div>\n         {/* Delete Spell dialog confirmation */}\n        <Dialog\n          open={spellToDelete === spell.id}\n          onClose={() => handleClose(spell.id)}\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\"\n        >\n          <DialogTitle id=\"alert-dialog-title\">{\"Delete spell?\"}</DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-description\">\n              Are you sure you would like to delete this spell?\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => {handleClose(); deleteSpells(spell.id); history.push('/spells')}} color=\"secondary\">\n              Delete\n            </Button>\n            <Button onClick={handleClose} color=\"primary\" autoFocus>\n              Keep\n            </Button>\n          </DialogActions>\n          </Dialog>\n          <div className={classes.iconRow}>\n          {spell.locked || !userOwnsSpell ? \n            <TextField className={classes.spellDetailsDescription}\n              id = \"spell-details-description\"\n              label=\"Description\"\n              defaultValue={spell.description}\n              disabled\n            />:\n            <TextField className={classes.spellDetailsDescription}\n              id = \"spell-details-description-owns\"\n              label=\"Description\"\n              defaultValue={spell.description}\n              onChange={(event) => {\n                setSpell({...spell, description: event.target.value})\n                setTimeout(() => {\n                  debounce(() => updateSpell({...spell, description: event.target.value}), debounceWait)\n                },500)\n              }}\n            />\n          }\n        </div>\n        <p></p>\n        <div className={classes.iconRow}>\n          {spell.locked || !userOwnsSpell ?\n            <TextField className={classes.tagLine}\n              placeholder=\"Tag\"\n              value = {spellTag}\n              label=\"Spell Tags\"\n              disabled\n            /> :\n            <TextField className={classes.tagLine}\n              placeholder=\"Tag\"\n              onKeyUp={handleKeyUp}\n              value = {spellTag}\n              label=\"Spell Tags\"\n              onChange={(event) => {\n                setSpellTag(event.target.value)\n              }}\n            />\n          }\n        </div>\n        {spell.locked || !userOwnsSpell ? \n          <div className={classes.icon}>\n            {spell.tags.map(t => (\n              <Chip\n              key={t.id}\n              variant=\"outlined\"\n              size=\"small\"\n              label={t.name}\n              />\n            ))}\n          </div>\n          :\n          <div className={classes.icon}>\n            {spell.tags.map(t => (\n              <Chip\n              key={t.id}\n              variant=\"outlined\"\n              size=\"small\"\n              label={t.name}\n              onDelete={() => removeTagFromSpell(spell.id, t.name)}\n              />\n            ))}\n          </div>\n        }\n        <p></p> \n        <div className={classes.spellDetailsCodeMirror}>\n          {spell.locked || !userOwnsSpell ?\n            <ReactCodeMirror\n              className={classes.spellDetailsCodeMirror}\n              value={spellText ? spellText : ''}\n              options={{\n                lineWrapping: true,\n                mode: 'scheme',\n                theme: 'material',\n                lineNumbers: true,\n                matchBrackets: true,\n                autoCloseBrackets: true,\n                styleActiveLine: true,\n              }}\n            /> :\n            <ReactCodeMirror\n              className={classes.spellDetailsCodeMirror}\n              value={spellText ? spellText : ''}\n              options={{\n                lineWrapping: true,\n                mode: 'scheme',\n                theme: 'material',\n                lineNumbers: true,\n                matchBrackets: true,\n                autoCloseBrackets: true,\n                styleActiveLine: true,\n              }}\n              onChange={(editor, data, value) => {\n                setSpell({...spell, text: value})\n                // setIsSaving(true)\n                setTimeout(() => {\n                  debounce(() => updateSpell({...spell, text: value}), debounceWait\n                )}, 500)\n              }}\n            />\n          }\n        </div>\n      </div>\n      :\n      <div role='alert'>\n        {error ? <p className='red'>{error}</p> : null}\n      </div>}\n    </>\n  );\n}\n","/usr/src/app/src/Components/Dashboard/Downloads.js",["177","178","179","180","181","182","183","184","185","186","187","188","189"],"// DownloadCards\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport DownloadCard from './DownloadCard'\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport Pagination from '@material-ui/lab/Pagination';\nimport { SearchBar } from '../../Util.js'\nimport SpellsApiService from '../../Services/spells-api-service';\nimport Title from './Title';\nimport styles from '../../styles.js'\n\nfunction Downloads() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [rowsPerPage, setRowsPerPage] = React.useState(9);\n  const [totalSpells, setTotalSpells] = React.useState(0);\n  const [currentPage, setCurrentPage] = useState(1)\n  const [search, setSearch] = React.useState('');\n  const [games, setGames] = React.useState([]);\n  const [totalGames, setTotalGames] = React.useState(0);\n    \n  useEffect(() => {\n    SpellsApiService.getDownloads()\n      .then(games => {\n        setGames(games.games)\n        setTotalGames(games.total)\n      })\n  }, [])\n\n  console.log(games, totalGames)\n\n  return (\n    <>\n      <div className={classes.headBar}>\n        <div className={classes.headLeft}></div>\n        <Title className={classes.headTitle}>Downloads</Title>\n        {/* <div className={classes.headRight}><SearchBar setSearch={setSearch} setCurrentPage={setCurrentPage}/></div> */}\n      </div>\n      \n      <Container className={classes.cardGrid} maxWidth=\"md\">\n        <Grid container spacing={4}>\n          {games.map((game) => (\n            <DownloadCard game={game} key={'Key ', game.id}/>\n          ))}\n        </Grid>\n      </Container>\n      \n      {/* <div className={classes.publicSpellsRoot}>\n        <Pagination count={Math.ceil(totalSpells / rowsPerPage)}\n          onChange={(event, page) => {setCurrentPage(page)}}\n        />\n      </div> */}\n    </>\n  );\n}\nexport default Downloads;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  details: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    flex: '1 0 auto',\n  },\n  cover: {\n    width: 151,\n  },\n  controls: {\n    display: 'flex',\n    alignItems: 'center',\n    paddingLeft: theme.spacing(1),\n    paddingBottom: theme.spacing(1),\n  },\n  playIcon: {\n    height: 38,\n    width: 38,\n  },\n  spellcardCard: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n}));","/usr/src/app/src/config.js",["190"],"if(process.env.REACT_APP_API_ENDPOINT.includes('8000')){\n  console.log('ENDPOINT: Local host');\n} else {\n  console.log('ENDPOINT: Heroku');\n}\n\nexport default {\n  API_ENDPOINT: process.env.REACT_APP_API_ENDPOINT,\n  TOKEN_KEY: process.env.REACT_APP_TOKEN_KEY,\n}","/usr/src/app/src/styles.js",["191","192","193","194","195","196","197","198"],"import { makeStyles, fade } from '@material-ui/core/styles';\nimport { red } from '@material-ui/core/colors';\n\nconst drawerWidth = 240;\nconst useStyles = makeStyles((theme) => ({\n\n  // Dashboard //\n  // dashRoot: {\n  //   display: 'flex',\n  // },\n  // toolbar: {\n  //   paddingRight: 24, // keep right padding when drawer closed\n  // },\n  // toolbarIcon: {\n  //   display: 'flex',\n  //   alignItems: 'center',\n  //   justifyContent: 'flex-end',\n  //   padding: '0 8px',\n  //   ...theme.mixins.toolbar,\n  // },\n  // appBar: {\n  //   zIndex: theme.zIndex.drawer + 1,\n  //   transition: theme.transitions.create(['width', 'margin'], {\n  //     easing: theme.transitions.easing.sharp,\n  //     duration: theme.transitions.duration.leavingScreen,\n  //   }),\n  // },\n  // appBarShift: {\n  //   marginLeft: drawerWidth,\n  //   width: `calc(100% - ${drawerWidth}px)`,\n  //   transition: theme.transitions.create(['width', 'margin'], {\n  //     easing: theme.transitions.easing.sharp,\n  //     duration: theme.transitions.duration.enteringScreen,\n  //   }),\n  // },\n  // dashMenuButton: {\n  //   marginRight: 36,\n  // },\n  // dashMenuButtonHidden: {\n  //   display: 'none',\n  // },\n  // dashTitle: {\n  //   flexGrow: 1,\n  // },\n  // drawerPaper: {\n  //   position: 'relative',\n  //   whiteSpace: 'nowrap',\n  //   width: drawerWidth,\n  //   transition: theme.transitions.create('width', {\n  //     easing: theme.transitions.easing.sharp,\n  //     duration: theme.transitions.duration.enteringScreen,\n  //   }),\n  // },\n  // drawerPaperClose: {\n  //   overflowX: 'hidden',\n  //   transition: theme.transitions.create('width', {\n  //     easing: theme.transitions.easing.sharp,\n  //     duration: theme.transitions.duration.leavingScreen,\n  //   }),\n  //   width: theme.spacing(7),\n  //   [theme.breakpoints.up('sm')]: {\n  //     width: theme.spacing(9),\n  //   },\n  // },\n  // appBarSpacer: {\n  // display: 'flex',\n  // alignItems: 'center',\n  // justifyContent: 'flex-end',\n  // padding: theme.spacing(0, 1),\n  // ...theme.mixins.toolbar,},\n  // content: {\n  //   flexGrow: 1,\n  //   height: '100vh',\n  //   overflow: 'auto',\n  // },\n  // dashContainer: {\n  //   paddingTop: theme.spacing(4),\n  //   paddingBottom: theme.spacing(4),\n  // },\n  // dashPaper: {\n  //   padding: theme.spacing(2),\n  //   display: 'flex',\n  //   overflow: 'auto',\n  //   flexDirection: 'column',\n  // },\n  // fixedHeight: {\n  //   height: 240,\n  // },\n  // link: {\n  //   width: '10%',\n  // },\n\n  // DownloadCard\n  root: {\n    display: 'flex',\n  },\n  details: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    flex: '1 0 auto',\n  },\n  cover: {\n    width: 151,\n  },\n  controls: {\n    display: 'flex',\n    alignItems: 'center',\n    paddingLeft: theme.spacing(1),\n    paddingBottom: theme.spacing(1),\n  },\n  downloadIcon: {\n    display: 'flex',\n    justifyContent: 'center',\n    height: 38,\n    width: 38,\n  },\n  \n  //FabAddIcon //\n  fab: {\n    position: 'absolute',\n    bottom: theme.spacing(4),\n    right: theme.spacing(4),\n  },\n\n  // ListItems //\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(1),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      width: '12ch',\n      '&:focus': {\n        width: '20ch',\n      },\n    },\n  },\n\n  // SpellChart //\n  icons: {\n    width: '32px',\n    textAlign: 'center',\n  },\n  title: {\n    display: 'flex',\n    flex: '1 1 100%',\n  },\n  pagi: {\n    marginTop: '8px',\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  container: {\n    maxHeight: '70vh',\n  },\n  headBar: {\n    justifyContent: 'space-between',\n    fontSize: '1.5rem',\n    display: 'inline-flex',\n    width: 'auto',\n    fontFamily: \"Roboto\",\n    fontWeight: '400',\n    lineHeight: '1.334',\n    letterSpacing: '0em',\n    color: '#3f51b5',\n  },\n  headLeft: {\n    flexGrow: '5',\n    display: 'inline-flex',\n  },\n  headTitle: {\n    flexGrow: '3',\n    display: 'inline-flex',\n  },\n  headTitle101: {\n    flexGrow: '3',\n    display: 'inline-flex',\n    fontWeight: '400px' ,\n  },\n  headRight: {\n    flexGrow: '1',\n    width: '120px',\n    display: 'inline-flex',\n    justifyContent: 'flex-end',\n  },\n  spellChartRoot: {\n    width: '100%',\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n  codeMirror: {\n    height: '60vh', \n    width: '29vw',\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n    duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  searchField: {\n    width: '114px',\n  },\n  searchFieldHidden: {\n    width: '0px',\n  },\n  copy: {\n    justifyContent: 'center',\n    width: '14ch',\n  },\n  cardHead: {\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  popover: {\n    pointerEvents: 'none',\n    justifyContent: 'center',\n    width: '100%',\n    padding: theme.spacing(1),\n  },\n  paper: {\n    padding: theme.spacing(1),\n  },\n\n  // SpellDetails //\n  spellDetailsDescription: {\n    margin: theme.spacing(1),\n    width: '100%',\n    justifyContent: 'left'\n  },\n  spinner: {\n    display: 'flex',\n    '& > * + *': {\n      marginRight: theme.spacing(2),\n    },\n  },\n  iconRow: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n  },\n    spellDetailsTitle: {\n    margin: theme.spacing(1),\n    width: '33%',\n    justifyContent: 'left'\n  },\n  spellDetailsIcons: {\n    width: '33%',\n    display: 'flex',\n    justifyContent: \"end\",\n  },\n  nameImageIcons: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    width: '33%'\n  },\n  iconBox: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    width: '33%',\n    height: '20%'\n  },\n  spellDetailsImage: {\n    display: 'flex',\n    justifyContent: 'center',  \n  },\n  tagField: {\n    width: '33%',\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  tagLine: {\n    margin: '8px'\n  },\n  spellDetailsTooltip: {\n    display: 'flex'\n  },\n  iconBut: {\n    display: 'flex',\n    margin: theme.spacing(1),\n    justifyContent: 'left'\n  },\n  titleRow: {\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  metaSpinner: {\n    width: '33%',\n    display: 'flex',\n    justifyContent: 'flex-end',\n  },\n  metaTitle: {\n    width: '33%',\n  },\n  metaID: {\n    width: '33%',\n    textAlign: 'left'\n  },\n  spellDetailsCodeMirror: {\n    height: '500px',\n  },\n  spellDetailsLocked: {\n    pointerEvents: 'none',\n  },\n\n  // Header //\n  headerRoot: {\n    flexGrow: 1,\n  },\n  headerTitle: {\n    flexGrow: 1,\n  },\n  \n  // LandingPage //\n  landingIntro: {\n    width: '700px',\n    textAlign: 'center',\n    margin: 'auto',\n  },\n  landingDisplay: {\n    width: '100%',\n    textAlign: 'center',\n  },\n\n  // LoginForm //\n  loginFormPaper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  loginFormAvatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  loginFormForm: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  loginFormSubmit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n\n  // PublicSpells //\n  publicSpellsRoot: {\n    '& > *': {\n      marginTop: theme.spacing(2),\n      display: 'flex',\n    justifyContent: 'center',\n    },\n  },\n  headBar: {\n    justifyContent: 'space-between',\n    fontSize: '1.5rem',\n    display: 'inline-flex',\n    width: 'auto',\n    fontFamily: \"Roboto\",\n    fontWeight: '400',\n    lineHeight: '1.334',\n    letterSpacing: '0em',\n    color: '#3f51b5',\n  },\n  headLeft: {\n    flexGrow: '5',\n    display: 'inline-flex',\n  },\n  headTitle: {\n    flexGrow: '3',\n    display: 'inline-flex',\n  },\n  headRight: {\n    flexGrow: '1',\n    width: '120px',\n    display: 'inline-flex',\n    justifyContent: 'flex-end',\n  },  \n\n  // SignupForm //\n  signupFormPaper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  signupFormAvatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  signupFormForm: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  signupFormSubmit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n\n  // Spellcard //\n  spellcardExpand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  spellcardExpandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  spellcardAvatar: {\n    backgroundColor: red[500],\n  },\n  spellcardChip: {\n    flexDirection:'row',\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  spellcardCard: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  spellcardCardMedia: {\n    paddingTop: '56.25%', // 16:9\n    color: \"blue\",\n  },\n  codeMirror: {\n    height: '60vh',\n    width: '29vw',\n  },\n  copy: {\n    justifyContent: 'center',\n    width: '14ch',\n  },\n  cardHead: {\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  spellcardFooter: {\n    display: 'flex',\n    justifyContent: 'space-between',\n  },\n  spellcardPopover: {\n    pointerEvents: 'none',\n  },\n  spellcardPaper: {\n    padding: theme.spacing(1),\n  },\n\n  // UserProfile //\n  userProfileRoot: {\n    '& > *': {\n      marginTop: theme.spacing(2),\n      display: 'flex',\n    justifyContent: 'center',\n    },\n  },\n  userProfileHeadBar: {\n    justifyContent: 'space-between',\n    fontSize: '1.5rem',\n    display: 'inline-flex',\n    width: 'auto',\n    fontFamily: \"Roboto\",\n    fontWeight: '400',\n    lineHeight: '1.334',\n    letterSpacing: '0em',\n    color: '#3f51b5',\n  },\n  userProfileHeadLeft: {\n    flexGrow: '5',\n    display: 'inline-flex',\n  },\n  userProfileHeadTitle: {\n    flexGrow: '3',\n    display: 'inline-flex',\n  },\n  userProfileHeadRight: {\n    flexGrow: '1',\n    width: '120px',\n    display: 'inline-flex',\n    justifyContent: 'flex-end',\n  },\n\n  // List Items\n  listIcon: {\n    backgroundColor: 'rgb(100,149,237)',\n  }\n}));\n\nexport default useStyles","/usr/src/app/src/Util.js",["199","200","201"],"import Pagination from '@material-ui/lab/Pagination';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SearchIcon from '@material-ui/icons/Search';\nimport InputBase from '@material-ui/core/InputBase';\nimport clsx from 'clsx';\nimport IconButton from '@material-ui/core/IconButton';\nimport useStyles from './styles.js';\nimport React, { useEffect } from 'react';\n\n\nexport function textTrim(text, length){\n  if (!text) return '';\n\n  if(text.length > length){\n    return text.slice(0, length) + '...';\n  } else {\n    return text;\n  }\n}\n\nexport function SearchBar(props) {\n  const classes = useStyles();\n\n  const [searchIcon, setSearchIcon] = React.useState(true)\n  const [focus, setFocus] = React.useState(false)\n\n  const handleSearchIconClick = () => {\n    setFocus(!focus)\n    setSearchIcon(!searchIcon);\n  };\n  \n  function onSearchIconChange(event) {\n    props.setSearch(event.target.value)\n    props.setCurrentPage(1)\n  }\n\n  return (\n    <>       \n      <InputBase\n        className={clsx(classes.searchField, searchIcon && classes.searchFieldHidden)}\n        placeholder=\"Search Spells\"\n        onChange={onSearchIconChange}\n        inputProps={{ 'aria-label': 'search' }}\n        inputRef={(input) => {\n          if (input != null) {\n            input.focus();\n          }\n        }}\n      />\n      <IconButton\n        onClick={(event) => handleSearchIconClick()}\n        aria-label = \"search icon\"\n      >\n        <SearchIcon />\n      </IconButton>\n    </>\n  )\n}\n","/usr/src/app/src/Components/Spellbook.js",["202","203","204","205"],"import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport Spellcard from './Spellcard';\n\nconst Spellbook = (props) => {\n  const classes = useStyles();\n\n  const [cardImage, setCardImage] = useState(undefined);\n\n  const [spellId, setSpellId] = useState(undefined);\n\n  return (\n    <Container className={classes.cardGrid} maxWidth=\"md\">\n      <Grid container spacing={4}>\n        {props.spells.map((spell) => (  \n          <Spellcard cardImage={cardImage} spell={spell} key={'key ' + spell.id}/>\n        ))}\n      </Grid>\n    </Container>\n  );\n};\n\nconst useStyles = makeStyles((theme) => ({\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n}));\n\nexport default Spellbook;\n","/usr/src/app/src/Components/Header.js",[],"/usr/src/app/src/Components/Dashboard/Title.js",[],"/usr/src/app/src/Components/Dashboard/ListItems.js",["206","207","208","209"],"import React from 'react';\nimport { useHistory, useParams } from \"react-router-dom\";\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport PeopleIcon from '@material-ui/icons/People';\nimport CodeIcon from '@material-ui/icons/Code';\nimport Divider from '@material-ui/core/Divider';\nimport PowerSettingsNewIcon from '@material-ui/icons/PowerSettingsNew';\nimport PhotoAlbumIcon from '@material-ui/icons/PhotoAlbum';\nimport TokenService from '../../Services/token-service';\nimport PersonIcon from '@material-ui/icons/Person';\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport ListIcon from '@material-ui/icons/List';\nimport ViewListIcon from '@material-ui/icons/ViewList';\nimport useStyles from '../../styles.js';\nimport { TwitchIcon } from '../../Assets/TwitchIcon.png';\nimport GetAppIcon from '@material-ui/icons/GetApp';\n\nexport function PublicListItems(props) {\n  const classes = useStyles();\n  let history = useHistory();\n\n  const handleClickButton = (path) => {\n    if(path === '/login') TokenService.clearAuthToken();\n    history.push(path)\n  }  \n\n  let path = window.location.pathname\n\n  return (\n  <>\n    <div>\n\n    <ListItem button onClick={() => handleClickButton('/spells')} \n      className={path === '/spells' ? classes.listIcon : ''}>\n      <ListItemIcon>\n        <ViewListIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"My Spells\" />\n    </ListItem>\n\n    <ListItem button onClick={() => handleClickButton('/friends')}\n      className={path === '/friends' ? classes.listIcon : ''}>\n      <ListItemIcon>\n        <PeopleIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Friends\" />\n    </ListItem>\n\n    <ListItem button onClick={() => handleClickButton('/gallery')}\n      className={path === '/gallery' ? classes.listIcon : ''}>\n      <ListItemIcon>\n        <PhotoAlbumIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Public Spells\" />\n    </ListItem>\n    </div>\n    <Divider />\n    <div>\n    <ListItem button onClick={() => handleClickButton('/wizards/me')}\n      className={path.includes('/wizards') ? classes.listIcon : ''}>\n      <ListItemIcon>\n        <AccountCircleIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"My Profile\" />\n    </ListItem>\n    <ListItem button onClick={() => handleClickButton('/downloads')}\n      className={path === '/downloads' ? classes.listIcon : ''}>\n      <ListItemIcon>\n        <GetAppIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Downloads\" />\n    </ListItem>\n    {/* Twitch Tab */}\n    {/* <ListItem button\n      onClick={() => handleClickButton('/wizards/me')}\n      >\n      <ListItemIcon >\n      <img src='https://i.imgur.com/O6pTizo.png' alt=\"TwitchIcon\" width=\"24px\"></img>\n      </ListItemIcon>\n      <ListItemText primary=\"Twitch\" />\n    </ListItem> */}\n    <ListItem button onClick={() => handleClickButton('/login')}>\n      <ListItemIcon>\n        <PowerSettingsNewIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Logout\" />\n    </ListItem>\n    </div>\n  </>\n  )\n};\n\nexport function PrivateListItems() {\n  const classes = useStyles();\n  let history = useHistory();\n\n  const handleClickButton = (path) => {\n    history.push(path)\n    if(path === '/login') TokenService.clearAuthToken();\n  }\n\n  let path = window.location.pathname\n\n  return (\n  <>\n    <div>\n    <ListItem button onClick={() => handleClickButton('/gallery')}\n      className={path === '/gallery' ? classes.listIcon : ''}>\n      <ListItemIcon>\n      <PhotoAlbumIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Public Spells\" />\n    </ListItem>\n    <ListItem button onClick={() => handleClickButton('/downloads')}\n      className={path === '/downloads' ? classes.listIcon : ''}>\n      <ListItemIcon>\n        <GetAppIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Downloads\" />\n    </ListItem>\n    </div>\n\n    <Divider />\n    <div>\n    <ListItem button onClick={() => history.push('/login')}>\n      <ListItemIcon>\n      <PersonIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Login\" />\n    </ListItem>\n    <ListItem button onClick={() => history.push('/signup')}>\n      <ListItemIcon>\n      <PersonAddIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Signup\" />\n    </ListItem>\n    </div>\n  </>\n  )\n}","/usr/src/app/src/Components/Dashboard/SpellChart.js",["210","211","212","213","214","215","216"],"import React, { useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Title from './Title';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport SpellsApiService from '../../Services/spells-api-service';\nimport {textTrim, SearchBar} from '../../Util.js'\nimport Pagination from '@material-ui/lab/Pagination';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport clsx from 'clsx';\nimport Typography from '@material-ui/core/Typography';\nimport Chip from '@material-ui/core/Chip';\nimport CodeIcon from '@material-ui/icons/Code';\nimport {UnControlled as CodeMirror} from 'react-codemirror2';\nimport LockIcon from '@material-ui/icons/Lock';\nimport TextField from '@material-ui/core/TextField';\nimport Popover from '@material-ui/core/Popover';\nimport useStyles from '../../styles.js';\nimport { SpellChartHeader } from './SpellChartHeader.js';\nimport 'codemirror/addon/edit/matchbrackets.js'\nimport 'codemirror/addon/edit/closebrackets.js'\nimport 'codemirror/addon/selection/active-line.js'\n\nexport default function SpellChart(props) {\n  const classes = useStyles();\n  let history = useHistory();\n\n  const [open, setOpen] = React.useState(false);\n  const [spellsPerPage, setSpellsPerPage] = React.useState(10);\n  const [expanded, setExpanded] = React.useState(false);\n  const [selected, setSelected] = React.useState([]);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [popText, setPopText] = React.useState('Click To Copy')\n  \n  const isSpellSelected = (id) => selected.indexOf(id) !== -1;\n  const popoverOpen = Boolean(anchorEl);\n\n  const runSpell = (id) => {\n    return \"!!run \" + id\n  }\n\n  const handleExpandClick = (id) => {\n    setExpanded(id);\n  };\n\n  const handleClickOpen = () => {\n    setOpen(true);\n    // setSpellToDelete(id);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    // setSpellToDelete(undefined);\n  };\n\n  const handleSelectAllClick = (event, id) => {\n    if (event.target.checked) {\n      const newSelecteds = props.spells\n        .map((spell) => {\n          if (spell.locked) {\n            console.log(spell.locked)\n          } else return spell.id\n        })\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleClickRow = (event, spell) => {\n    const name = spell.id\n    const selectedIndex = selected.indexOf(name);\n    let newSelected = [];\n    // Prevent locked spell from being deletable\n    if (!spell.locked) {\n      // Selects spell to be deleted\n      if (selectedIndex === -1) {\n        newSelected = newSelected.concat(selected, name);\n      } else if (selectedIndex === 0) {\n        newSelected = newSelected.concat(selected.slice(1));\n      } else if (selectedIndex === selected.length - 1) {\n        newSelected = newSelected.concat(selected.slice(0, -1));\n      } else if (selectedIndex > 0) {\n        newSelected = newSelected.concat(\n          selected.slice(0, selectedIndex),\n          selected.slice(selectedIndex + 1),\n        );\n      }\n      setSelected(newSelected);\n    }\n  };\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = props.orderBy.toLowerCase() === property.toLowerCase() && props.sortDirection === 'asc';\n    props.setSortDirection(isAsc ? 'desc' : 'asc');\n    props.setOrderBy(property.toLowerCase());\n  };\n\n  const updateSpell = (spell) => {\n    let payload = spell\n\n    SpellsApiService.updateSpell(payload, spell.id)\n      .then((spell) => {\n        props.onChange(spell)\n      })\n  }\n\n  function deleteAllSelected() {\n    SpellsApiService.deleteSpells(selected)\n      .then(res => {\n        // Re-request current page of spells\n        props.setRefresh(Math.random())\n        setSelected([])\n      })\n  }\n  \n  const handlePopoverOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handlePopoverClose = () => {\n    setAnchorEl(null);\n    setPopText('Click To Copy')\n  }\n\n  return (\n    props.spells ?\n    <React.Fragment>\n      <div className={classes.headBar}>\n        <div className={classes.headLeft}></div>\n        <div className={classes.headTitle}>My Spells</div>\n        <div className={classes.headRight}>\n          <SearchBar \n            setSearch={props.setSearch}\n            setCurrentPage={props.setCurrentPage} \n          />\n        </div>\n      </div>\n      <Toolbar\n        className={clsx(classes.spellChartRoot, {\n          [classes.highlight]: selected.length > 0,\n        })}\n      >\n        {selected.length > 0 ? (\n          <>\n          <Tooltip title=\"Delete\">\n            <IconButton aria-label=\"delete\" onClick={handleClickOpen}> \n              <DeleteForeverIcon \n                // onClick={deleteAllSelected}\n              />\n            </IconButton>\n          </Tooltip>\n            <Dialog \n              open={open}\n              // open={spellToDelete === spell.id}\n              onClose={() => handleClose()}\n              aria-labelledby=\"alert-dialog-title\"\n              aria-describedby=\"alert-dialog-description\"\n            >\n              <DialogTitle id=\"alert-dialog-title\">{\"Delete spell?\"}</DialogTitle>\n              <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">\n                  Are you sure you would like to delete this spell?\n                </DialogContentText>\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={() => {handleClose(); deleteAllSelected()}} color=\"secondary\">\n                  Delete\n                </Button>\n                <Button onClick={handleClose} color=\"primary\" autoFocus>\n                  Keep\n                </Button>\n              </DialogActions>\n            </Dialog>\n          </>\n        ) : (\n          <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n          </Typography>\n        )}\n        {selected.length > 0 ? (\n          <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n            {selected.length} selected\n          </Typography>\n        ) : (\n          <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n          </Typography>\n        )}\n      </Toolbar>\n      <TableContainer className={classes.container}>\n        <Table size='small' padding='none' stickyHeader aria-label=\"sticky table\"> \n          <SpellChartHeader\n            classes={classes}\n            numSelected={selected.length}\n            sortDirection={props.sortDirection}\n            orderBy={props.orderBy}\n            onSelectAllClick={handleSelectAllClick}\n            onRequestSort={handleRequestSort}\n            spells={props.spells}\n            spellsPerPage={spellsPerPage}\n          />\n          <TableBody>\n            {props.spells.map((spell) => (\n              <TableRow \n                hover \n                key={\"Key: \" + spell.id}\n                onClick={(event) => handleClickRow(event, spell)}\n                selected={selected.indexOf(spell.id) !== -1}\n              >\n                <TableCell padding=\"checkbox\">\n                  {spell.locked ?\n                  ''\n                  :\n                  <Checkbox\n                    checked={isSpellSelected(spell.id)}\n                  />\n                  }\n                </TableCell>\n                <Tooltip title={new Date(Date.parse(spell.date_created)).toLocaleTimeString()} arrow placement=\"bottom-start\">\n                  <TableCell>{new Date(Date.parse(spell.date_created)).toLocaleDateString()}</TableCell>\n                </Tooltip>\n                <Tooltip title={new Date(Date.parse(spell.date_modified)).toLocaleTimeString()} arrow placement=\"bottom-start\">\n                  <TableCell>{new Date(Date.parse(spell.date_modified)).toLocaleDateString()}</TableCell>\n                </Tooltip>\n                <TableCell>{textTrim(spell.name, 15)}</TableCell>\n                <TableCell>{textTrim(spell.description, 30)}</TableCell>\n                <TableCell width='40%'>{spell.tags.length ? \n                  spell.tags.map(t => (\n                    <Chip\n                      key={t.id}\n                      variant=\"outlined\"\n                      size=\"small\"\n                      label={t.name}\n                      onClick={(event) => {\n                        event.stopPropagation();\n                      }}\n                    />\n                  )) : ''}\n                </TableCell>\n                <TableCell className={classes.icons}>\n                  <IconButton\n                    className={clsx(classes.expand, {\n                      [classes.expandOpen]: expanded == spell.id,\n                    })}\n                    onClick={(event) => {\n                      handleExpandClick(spell.id)\n                      event.stopPropagation();\n                    }}\n                    aria-expanded={expanded == spell.id}\n                    aria-label=\"show more\"\n                  >\n                    <Tooltip title=\"View Code\" placement=\"top\">\n                      <CodeIcon />\n                    </Tooltip>\n                  </IconButton>\n                  <Dialog\n                    open={expanded == spell.id}\n                    onClose={(event) => {\n                      handleExpandClick(false)\n                    }}\n                    onClick={(event) => {\n                      event.stopPropagation();\n                    }}\n                    aria-labelledby=\"alert-dialog-title\"\n                    aria-describedby=\"alert-dialog-description\"\n                  >\n                    <div className={classes.cardHead}>\n                      <DialogTitle id=\"alert-dialog-title\">{`${spell.name}`}</DialogTitle>\n                    </div>\n                    <div className={classes.cardHead}>\n                      <TextField\n                        size=\"small\"\n                        className={classes.copy}\n                        id=\"read-only-twitch-command\"\n                        label=\"Twitch Dictum\"\n                        defaultValue= {runSpell(spell.id)}\n                        InputProps={{\n                          readOnly: true,\n                        }}\n                        variant=\"outlined\"\n                        aria-owns={popoverOpen ? 'mouse-over-popover' : undefined}\n                        aria-haspopup=\"true\"\n                        onMouseEnter={handlePopoverOpen}\n                        onMouseLeave={handlePopoverClose}\n                        onClick={() => {\n                          navigator.clipboard.writeText(runSpell(spell.id))\n                          setPopText('Copied!')\n                        }}\n                      />\n                      <Popover\n                        id=\"mouse-over-popover\"\n                        className={classes.popover}\n                        classes={{\n                          paper: classes.paper,\n                        }}\n                        open={popoverOpen}\n                        anchorEl={anchorEl}\n                        anchorOrigin={{\n                          vertical: 'bottom',\n                          horizontal: 'left',\n                        }}\n                        transformOrigin={{\n                          vertical: 'top',\n                          horizontal: 'left',\n                        }}\n                        onClose={handlePopoverClose}\n                        disableRestoreFocus\n                      >\n                        <Typography>{popText}</Typography>\n                      </Popover>\n                    </div>\n                    <DialogContent className=\"dialogBox\">\n                      <DialogContentText id=\"CodeMirror-Display\">\n                        <CodeMirror\n                          className={classes.codeMirror}\n                          value={spell.text}\n                          options={{\n                            lineWrapping: true,\n                            mode: 'scheme',\n                            theme: 'material',\n                            lineNumbers: true,\n                            matchBrackets: true,\n                            autoCloseBrackets: true,\n                            styleActiveLine: true,\n                          }}\n                        />\n                      </DialogContentText>\n                      Edited code will not be saved\n                    </DialogContent>\n                  </Dialog>\n                </TableCell>\n                <>\n                {spell.locked ? \n                  <>\n                    \n                    <TableCell className={classes.icons}>\n                      <IconButton aria-label=\"details\" onClick={() => history.push(`/spells/${spell.id}`)}>\n                        <LockIcon />\n                      </IconButton>\n                    </TableCell>\n                    <TableCell className={classes.icons}>\n                      <IconButton \n                        id={spell.id} \n                        aria-label=\"isPublic\" \n                        disabled\n                      >\n                        {spell.is_public ? <VisibilityIcon /> : <VisibilityOffIcon />}\n                      </IconButton>\n                    </TableCell>\n                  </>\n                  :\n                  <>\n                  <TableCell className={classes.icons}>\n                    <IconButton aria-label=\"edit\" onClick={() => history.push(`/spells/${spell.id}`)}>\n                      <EditIcon />\n                    </IconButton>\n                  </TableCell>\n                  <TableCell className={classes.icons}>\n                    <IconButton \n                      id={spell.id} \n                      aria-label=\"isPublic\" \n                      onClick={(event) => {\n                        updateSpell({...spell, is_public: !spell.is_public});\n                        event.stopPropagation();\n                    }}>\n                      {spell.is_public ? <VisibilityIcon /> : <VisibilityOffIcon />}\n                    </IconButton>\n                  </TableCell>\n                  </>\n                }\n                </>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      {/* {console.log(props.spells)} */}\n        <div className={classes.pagi}>\n          <Pagination count={Math.ceil(props.totalSpells / spellsPerPage)}\n            onChange={(event, page) => {\n              props.setCurrentPage(page)\n              setSelected([])\n            }}\n          />\n        </div>\n    </React.Fragment>\n    : ''\n  );\n}","/usr/src/app/src/Components/Dashboard/FabAddIcon.js",[],"/usr/src/app/src/Components/Dashboard/DownloadCard.js",["217","218","219","220","221","222","223","224","225","226","227"],"import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport clsx from \"clsx\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SkipPreviousIcon from \"@material-ui/icons/SkipPrevious\";\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\nimport SkipNextIcon from \"@material-ui/icons/SkipNext\";\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport useStyles from \"../../styles.js\";\nimport Grid from \"@material-ui/core/Grid\";\nimport GetAppIcon from '@material-ui/icons/GetApp';\n\nconst DownloadCard = (props) => {\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const {game} = props\n  return (\n    <Grid className={\"Card Frame\"} item key={\"Frame \"} xs={12} sm={6} md={4}>\n      <Card className={classes.root}>\n        <div className={classes.details}>\n          <CardContent className={classes.content}>\n            <Typography component=\"h5\" variant=\"h5\">\n              {game.name}\n            </Typography>\n            <Typography variant=\"subtitle1\" color=\"textSecondary\">\n              {game.description}\n            </Typography>\n          </CardContent>\n          <div className={classes.controls}>\n            <IconButton aria-label=\"previous\">\n              <ChevronRightIcon />\n            </IconButton>\n            <IconButton aria-label=\"Download Game\" href={`${game.link}`}>\n              <GetAppIcon className={classes.downloadIcon} />\n            </IconButton>\n            <IconButton aria-label=\"next\">\n              <ChevronLeftIcon />\n            </IconButton>\n          </div>\n        </div>\n        <CardMedia\n          className={classes.cover}\n          image={`${game.thumbnail}`}\n          title=\"Live from space album cover\"\n        />\n      </Card>\n    </Grid>\n  );\n};\n\nexport default DownloadCard;","/usr/src/app/src/Components/Dashboard/SpellChartHeader.js",["228"],"import React, { useEffect } from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport PropTypes from 'prop-types';\n\nconst headCells = [\n  { id: 'Created', numeric: false, disablePadding: true, label: 'Created' },\n  { id: 'Modified', numeric: false, disablePadding: true, label: 'Modified' },\n  { id: 'Name', numeric: false, disablePadding: true, label: 'Name' },\n  { id: 'Description', numeric: false, disablePadding: false, label: 'Description' },\n  { id: 'Tags', numeric: false, disablePadding: false, label: 'Tags' },\n  { id: 'Code', numeric: false, disablePadding: true, label: 'Code' },\n  { id: 'Edit', numeric: false, disablePadding: true, label: 'Edit'},\n  { id: 'Public', numeric: false, disablePadding: true, label: 'Public'},\n];\n\nexport function SpellChartHeader(props) {\n  const { classes, onSelectAllClick, sortDirection, orderBy, numSelected, onRequestSort, spells, spellsPerPage } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            indeterminate={numSelected > 0 && numSelected < spellsPerPage}\n            checked={spells.length > 0 && numSelected === Math.min(spells.length, spellsPerPage)}\n            onChange={onSelectAllClick}\n            inputProps={{ 'aria-label': 'select all desserts' }}\n          />\n          \n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? sortDirection : false}\n          >\n            {headCell.id !== 'Tags' && headCell.id !== 'Code' && headCell.id !== 'Edit' ?\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? sortDirection : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n              >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {sortDirection === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n              ) : null}\n            </TableSortLabel>\n            : headCell.id}\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nSpellChartHeader.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  sortDirection: PropTypes.oneOf(['asc', 'desc']),\n};","/usr/src/app/src/Components/Spellcard.js",["229","230","231"],"import React, { useEffect, useState } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport clsx from 'clsx';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport SpellsApiService from '../Services/spells-api-service';\nimport CallSplitIcon from '@material-ui/icons/CallSplit';\nimport CodeIcon from '@material-ui/icons/Code';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {UnControlled as CodeMirror} from 'react-codemirror2';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Chip from '@material-ui/core/Chip';\nimport {textTrim} from '../Util.js'\nimport TextField from '@material-ui/core/TextField';\nimport LockIcon from '@material-ui/icons/Lock';\nimport Popover from '@material-ui/core/Popover';\nimport Avatar from '@material-ui/core/Avatar';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport useStyles from '../styles.js';\nimport 'codemirror/addon/edit/matchbrackets.js'\nimport 'codemirror/addon/edit/closebrackets.js'\nimport 'codemirror/addon/selection/active-line.js'\nimport Button from '@material-ui/core/Button';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\n\n\nconst Spellcard = (props) => {\n  const classes = useStyles();\n  let history = useHistory();\n  const [expanded, setExpanded] = React.useState(false);\n  const runSpell= \"!!run \" + props.spell.id\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const popoverOpen = Boolean(anchorEl);\n  const [popText, setPopText] = React.useState('Click To Copy')\n\n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n  };\n\n  const clickForkIcon = (id) => {\n    SpellsApiService.forkSpellById(id)\n    .then((spell) => {\n      history.push(`/spells/${spell.id}`)\n    })\n  }\n\n  const handlePopoverOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handlePopoverClose = () => {\n    setAnchorEl(null);\n    setPopText('Click To Copy')\n  }\n\n  return (\n    <Grid className={'Card Frame'} item key={'Frame ' + props.spell.id} xs={12} sm={6} md={4}>\n      <Card className={classes.spellcardCard}>\n      <CardHeader\n        avatar={\n          <Tooltip title={`${props.spell.author}`} placement='top'>\n            <Button onClick={() => history.push(`/wizards/${props.spell.user_id}`)}>\n              <Avatar aria-label=\"recipe\" className={classes.spellcardAvatar}>\n                {props.spell.author.slice(0,1).toUpperCase()}\n              </Avatar>\n            </Button>\n          </Tooltip>\n        }\n        action={\n          <Tooltip title='View Details' placement='top'>\n            <IconButton aria-label=\"settings\" onClick={() => history.push(`/spells/${props.spell.id}`)}>\n              <ArrowForwardIosIcon />\n            </IconButton>\n          </Tooltip>\n        }\n        title={textTrim(props.spell.name, 19)}\n        subheader={new Date(Date.parse(props.spell.date_modified)).toLocaleDateString()}\n      />\n        <CardMedia\n          className={classes.spellcardCardMedia}\n          // image={props.cardImage}\n          // image=\"https://i.imgur.com/33XGUsG.jpg\"\n          image=\"https://i.imgur.com/KEPVIOS.jpg\"\n          title={\"Image title\" + props.spell.id}\n        />\n        <CardContent >\n          <Typography>\n            {textTrim(props.spell.description, 30)}\n          </Typography>\n        </CardContent>\n        <div className={classes.spellcardChip}>\n        {props.spell.tags.map(t => (\n          <Chip\n          key={'tags ' + t.id}\n          variant=\"outlined\"\n          size=\"small\"\n          label={t.name}\n          // onClick={(event) => {\n          // }}\n          />\n        ))}\n        </div>\n        <CardActions className={classes.spellcardFooter}>\n          <Tooltip title=\"Fork Spell\" placement=\"top\">\n            <IconButton onClick={() => clickForkIcon(props.spell.id)}>\n              <CallSplitIcon />\n            </IconButton>\n          </Tooltip>\n          {props.spell.locked ? <LockIcon /> : \"\"}\n          ID: {props.spell.id}\n          <Tooltip title=\"View Code\" placement=\"top\">\n            <IconButton\n              className={clsx(classes.spellcardExpand, {\n                [classes.spellcardExpandOpen]: expanded,\n              })}\n              onClick={handleExpandClick}\n              aria-expanded={expanded}\n              aria-label=\"show more\"\n            >\n              <CodeIcon />\n            </IconButton>\n          </Tooltip>\n        </CardActions>\n        <Dialog\n          // open={open}\n          open={expanded}\n          onClose={handleExpandClick}\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\"\n        >\n          <div className={classes.cardHead}>\n            <DialogTitle id=\"alert-dialog-title\">{`${props.spell.name}`}</DialogTitle>\n          </div>\n          <div className={classes.cardHead}>\n            <TextField\n            size=\"small\"\n            className={classes.copy}\n            id=\"read-only-twitch-command\"\n            label=\"Twitch Dictum\"\n            defaultValue= {runSpell}\n            InputProps={{\n              readOnly: true,\n            }}\n            variant=\"outlined\"\n            aria-owns={popoverOpen ? 'mouse-over-popover' : undefined}\n            aria-haspopup=\"true\"\n            onMouseEnter={handlePopoverOpen}\n            onMouseLeave={handlePopoverClose}\n            onClick={() =>  {\n              navigator.clipboard.writeText(runSpell)\n              setPopText('Copied!')\n            }}\n            />\n            <Popover\n              id=\"mouse-over-popover\"\n              className={classes.spellcardPopover}\n              classes={{\n                paper: classes.spellcardPaper,\n              }}\n              open={popoverOpen}\n              anchorEl={anchorEl}\n              anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'left',\n              }}\n              transformOrigin={{\n                vertical: 'top',\n                horizontal: 'left',\n              }}\n              onClose={handlePopoverClose}\n              disableRestoreFocus\n            >\n              <Typography>{popText}</Typography>\n            </Popover>\n          </div>\n          <DialogContent className=\"dialogBox\">\n            <DialogContentText id=\"CodeMirror-Display\">\n              <CodeMirror\n                className={classes.codeMirror}\n                value={props.spell.text}\n                options={{\n                  lineWrapping: true,\n                  mode: 'scheme',\n                  theme: 'material',\n                  lineNumbers: true,\n                  matchBrackets: true,\n                  autoCloseBrackets: true,\n                  styleActiveLine: true,\n                }}\n              />\n            </DialogContentText>\n          </DialogContent>\n        </Dialog>\n      </Card>\n    </Grid>\n  )\n};\n\nexport default Spellcard;\n","/usr/src/app/src/Components/Docs/Docs.js",["232"],{"ruleId":"233","severity":1,"message":"234","line":7,"column":9,"nodeType":"235","messageId":"236","endLine":7,"endColumn":29},{"ruleId":"237","replacedBy":"238"},{"ruleId":"239","replacedBy":"240"},{"ruleId":"233","severity":1,"message":"241","line":5,"column":40,"nodeType":"235","messageId":"236","endLine":5,"endColumn":54},{"ruleId":"233","severity":1,"message":"242","line":7,"column":8,"nodeType":"235","messageId":"236","endLine":7,"endColumn":20},{"ruleId":"233","severity":1,"message":"243","line":30,"column":9,"nodeType":"235","messageId":"236","endLine":30,"endColumn":14},{"ruleId":"233","severity":1,"message":"242","line":2,"column":8,"nodeType":"235","messageId":"236","endLine":2,"endColumn":20},{"ruleId":"233","severity":1,"message":"244","line":3,"column":8,"nodeType":"235","messageId":"236","endLine":3,"endColumn":14},{"ruleId":"233","severity":1,"message":"245","line":15,"column":7,"nodeType":"235","messageId":"236","endLine":15,"endColumn":14},{"ruleId":"233","severity":1,"message":"246","line":17,"column":10,"nodeType":"235","messageId":"236","endLine":17,"endColumn":22},{"ruleId":"233","severity":1,"message":"247","line":17,"column":24,"nodeType":"235","messageId":"236","endLine":17,"endColumn":39},{"ruleId":"233","severity":1,"message":"248","line":18,"column":10,"nodeType":"235","messageId":"236","endLine":18,"endColumn":16},{"ruleId":"233","severity":1,"message":"249","line":18,"column":18,"nodeType":"235","messageId":"236","endLine":18,"endColumn":27},{"ruleId":"233","severity":1,"message":"245","line":41,"column":7,"nodeType":"235","messageId":"236","endLine":41,"endColumn":14},{"ruleId":"233","severity":1,"message":"250","line":43,"column":16,"nodeType":"235","messageId":"236","endLine":43,"endColumn":23},{"ruleId":"233","severity":1,"message":"251","line":1,"column":17,"nodeType":"235","messageId":"236","endLine":1,"endColumn":26},{"ruleId":"233","severity":1,"message":"252","line":1,"column":28,"nodeType":"235","messageId":"236","endLine":1,"endColumn":36},{"ruleId":"233","severity":1,"message":"253","line":2,"column":10,"nodeType":"235","messageId":"236","endLine":2,"endColumn":16},{"ruleId":"233","severity":1,"message":"251","line":1,"column":17,"nodeType":"235","messageId":"236","endLine":1,"endColumn":26},{"ruleId":"233","severity":1,"message":"254","line":2,"column":8,"nodeType":"235","messageId":"236","endLine":2,"endColumn":13},{"ruleId":"233","severity":1,"message":"255","line":13,"column":23,"nodeType":"235","messageId":"236","endLine":13,"endColumn":37},{"ruleId":"233","severity":1,"message":"256","line":11,"column":10,"nodeType":"235","messageId":"236","endLine":11,"endColumn":20},{"ruleId":"233","severity":1,"message":"254","line":2,"column":8,"nodeType":"235","messageId":"236","endLine":2,"endColumn":13},{"ruleId":"233","severity":1,"message":"255","line":12,"column":23,"nodeType":"235","messageId":"236","endLine":12,"endColumn":37},{"ruleId":"257","severity":1,"message":"258","line":29,"column":5,"nodeType":"259","endLine":29,"endColumn":32,"suggestions":"260"},{"ruleId":"233","severity":1,"message":"261","line":33,"column":9,"nodeType":"235","messageId":"236","endLine":33,"endColumn":25},{"ruleId":"233","severity":1,"message":"262","line":24,"column":8,"nodeType":"235","messageId":"236","endLine":24,"endColumn":18},{"ruleId":"233","severity":1,"message":"263","line":42,"column":10,"nodeType":"235","messageId":"236","endLine":42,"endColumn":14},{"ruleId":"233","severity":1,"message":"264","line":42,"column":16,"nodeType":"235","messageId":"236","endLine":42,"endColumn":23},{"ruleId":"233","severity":1,"message":"265","line":44,"column":10,"nodeType":"235","messageId":"236","endLine":44,"endColumn":15},{"ruleId":"233","severity":1,"message":"266","line":44,"column":17,"nodeType":"235","messageId":"236","endLine":44,"endColumn":25},{"ruleId":"233","severity":1,"message":"267","line":45,"column":10,"nodeType":"235","messageId":"236","endLine":45,"endColumn":20},{"ruleId":"233","severity":1,"message":"268","line":45,"column":22,"nodeType":"235","messageId":"236","endLine":45,"endColumn":35},{"ruleId":"233","severity":1,"message":"269","line":96,"column":9,"nodeType":"235","messageId":"236","endLine":96,"endColumn":21},{"ruleId":"270","severity":1,"message":"271","line":268,"column":13,"nodeType":"272","endLine":268,"endColumn":86},{"ruleId":"233","severity":1,"message":"273","line":7,"column":8,"nodeType":"235","messageId":"236","endLine":7,"endColumn":18},{"ruleId":"233","severity":1,"message":"274","line":8,"column":10,"nodeType":"235","messageId":"236","endLine":8,"endColumn":19},{"ruleId":"233","severity":1,"message":"275","line":11,"column":8,"nodeType":"235","messageId":"236","endLine":11,"endColumn":14},{"ruleId":"233","severity":1,"message":"276","line":15,"column":9,"nodeType":"235","messageId":"236","endLine":15,"endColumn":14},{"ruleId":"233","severity":1,"message":"277","line":16,"column":10,"nodeType":"235","messageId":"236","endLine":16,"endColumn":21},{"ruleId":"233","severity":1,"message":"255","line":16,"column":23,"nodeType":"235","messageId":"236","endLine":16,"endColumn":37},{"ruleId":"233","severity":1,"message":"278","line":17,"column":10,"nodeType":"235","messageId":"236","endLine":17,"endColumn":21},{"ruleId":"233","severity":1,"message":"279","line":17,"column":23,"nodeType":"235","messageId":"236","endLine":17,"endColumn":37},{"ruleId":"233","severity":1,"message":"280","line":18,"column":10,"nodeType":"235","messageId":"236","endLine":18,"endColumn":21},{"ruleId":"233","severity":1,"message":"281","line":18,"column":23,"nodeType":"235","messageId":"236","endLine":18,"endColumn":37},{"ruleId":"233","severity":1,"message":"282","line":19,"column":10,"nodeType":"235","messageId":"236","endLine":19,"endColumn":16},{"ruleId":"233","severity":1,"message":"283","line":19,"column":18,"nodeType":"235","messageId":"236","endLine":19,"endColumn":27},{"ruleId":"284","severity":1,"message":"285","line":44,"column":50,"nodeType":"286","messageId":"287","endLine":44,"endColumn":51},{"ruleId":"288","severity":1,"message":"289","line":7,"column":1,"nodeType":"290","endLine":10,"endColumn":2},{"ruleId":"233","severity":1,"message":"291","line":4,"column":7,"nodeType":"235","messageId":"236","endLine":4,"endColumn":18},{"ruleId":"292","severity":1,"message":"293","line":396,"column":3,"nodeType":"294","messageId":"295","endLine":396,"endColumn":10},{"ruleId":"292","severity":1,"message":"296","line":407,"column":3,"nodeType":"294","messageId":"295","endLine":407,"endColumn":11},{"ruleId":"292","severity":1,"message":"297","line":411,"column":3,"nodeType":"294","messageId":"295","endLine":411,"endColumn":12},{"ruleId":"292","severity":1,"message":"298","line":415,"column":3,"nodeType":"294","messageId":"295","endLine":415,"endColumn":12},{"ruleId":"292","severity":1,"message":"299","line":469,"column":3,"nodeType":"294","messageId":"295","endLine":469,"endColumn":13},{"ruleId":"292","severity":1,"message":"300","line":473,"column":3,"nodeType":"294","messageId":"295","endLine":473,"endColumn":7},{"ruleId":"292","severity":1,"message":"301","line":477,"column":3,"nodeType":"294","messageId":"295","endLine":477,"endColumn":11},{"ruleId":"233","severity":1,"message":"273","line":1,"column":8,"nodeType":"235","messageId":"236","endLine":1,"endColumn":18},{"ruleId":"233","severity":1,"message":"256","line":2,"column":10,"nodeType":"235","messageId":"236","endLine":2,"endColumn":20},{"ruleId":"233","severity":1,"message":"251","line":8,"column":17,"nodeType":"235","messageId":"236","endLine":8,"endColumn":26},{"ruleId":"233","severity":1,"message":"251","line":1,"column":17,"nodeType":"235","messageId":"236","endLine":1,"endColumn":26},{"ruleId":"233","severity":1,"message":"302","line":10,"column":21,"nodeType":"235","messageId":"236","endLine":10,"endColumn":33},{"ruleId":"233","severity":1,"message":"303","line":12,"column":10,"nodeType":"235","messageId":"236","endLine":12,"endColumn":17},{"ruleId":"233","severity":1,"message":"304","line":12,"column":19,"nodeType":"235","messageId":"236","endLine":12,"endColumn":29},{"ruleId":"233","severity":1,"message":"305","line":2,"column":22,"nodeType":"235","messageId":"236","endLine":2,"endColumn":31},{"ruleId":"233","severity":1,"message":"306","line":7,"column":8,"nodeType":"235","messageId":"236","endLine":7,"endColumn":16},{"ruleId":"233","severity":1,"message":"307","line":15,"column":8,"nodeType":"235","messageId":"236","endLine":15,"endColumn":16},{"ruleId":"233","severity":1,"message":"308","line":18,"column":10,"nodeType":"235","messageId":"236","endLine":18,"endColumn":20},{"ruleId":"233","severity":1,"message":"251","line":1,"column":17,"nodeType":"235","messageId":"236","endLine":1,"endColumn":26},{"ruleId":"233","severity":1,"message":"254","line":7,"column":8,"nodeType":"235","messageId":"236","endLine":7,"endColumn":13},{"ruleId":"233","severity":1,"message":"309","line":45,"column":25,"nodeType":"235","messageId":"236","endLine":45,"endColumn":41},{"ruleId":"310","severity":1,"message":"311","line":75,"column":22,"nodeType":"312","messageId":"313","endLine":75,"endColumn":24},{"ruleId":"314","severity":1,"message":"315","line":258,"column":54,"nodeType":"316","messageId":"295","endLine":258,"endColumn":56},{"ruleId":"314","severity":1,"message":"315","line":264,"column":45,"nodeType":"316","messageId":"295","endLine":264,"endColumn":47},{"ruleId":"314","severity":1,"message":"315","line":272,"column":36,"nodeType":"316","messageId":"295","endLine":272,"endColumn":38},{"ruleId":"233","severity":1,"message":"251","line":1,"column":17,"nodeType":"235","messageId":"236","endLine":1,"endColumn":26},{"ruleId":"233","severity":1,"message":"252","line":1,"column":28,"nodeType":"235","messageId":"236","endLine":1,"endColumn":36},{"ruleId":"233","severity":1,"message":"317","line":2,"column":10,"nodeType":"235","messageId":"236","endLine":2,"endColumn":20},{"ruleId":"233","severity":1,"message":"256","line":3,"column":10,"nodeType":"235","messageId":"236","endLine":3,"endColumn":20},{"ruleId":"233","severity":1,"message":"318","line":4,"column":8,"nodeType":"235","messageId":"236","endLine":4,"endColumn":12},{"ruleId":"233","severity":1,"message":"319","line":6,"column":8,"nodeType":"235","messageId":"236","endLine":6,"endColumn":18},{"ruleId":"233","severity":1,"message":"320","line":9,"column":8,"nodeType":"235","messageId":"236","endLine":9,"endColumn":19},{"ruleId":"233","severity":1,"message":"321","line":12,"column":8,"nodeType":"235","messageId":"236","endLine":12,"endColumn":24},{"ruleId":"233","severity":1,"message":"322","line":14,"column":8,"nodeType":"235","messageId":"236","endLine":14,"endColumn":21},{"ruleId":"233","severity":1,"message":"323","line":15,"column":8,"nodeType":"235","messageId":"236","endLine":15,"endColumn":20},{"ruleId":"233","severity":1,"message":"276","line":23,"column":9,"nodeType":"235","messageId":"236","endLine":23,"endColumn":14},{"ruleId":"233","severity":1,"message":"251","line":1,"column":17,"nodeType":"235","messageId":"236","endLine":1,"endColumn":26},{"ruleId":"233","severity":1,"message":"251","line":1,"column":17,"nodeType":"235","messageId":"236","endLine":1,"endColumn":26},{"ruleId":"233","severity":1,"message":"252","line":1,"column":28,"nodeType":"235","messageId":"236","endLine":1,"endColumn":36},{"ruleId":"233","severity":1,"message":"324","line":27,"column":8,"nodeType":"235","messageId":"236","endLine":27,"endColumn":20},{"ruleId":"257","severity":1,"message":"325","line":31,"column":5,"nodeType":"259","endLine":31,"endColumn":7,"suggestions":"326"},"no-unused-vars","'SpellContextProvider' is defined but never used.","Identifier","unusedVar","no-native-reassign",["327"],"no-negated-in-lhs",["328"],"'AuthApiService' is defined but never used.","'TokenService' is defined but never used.","'paper' is assigned a value but never used.","'config' is defined but never used.","'history' is assigned a value but never used.","'publicSpells' is assigned a value but never used.","'setPublicSpells' is assigned a value but never used.","'spells' is assigned a value but never used.","'setSpells' is assigned a value but never used.","'setUser' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'Switch' is defined but never used.","'Title' is defined but never used.","'setRowsPerPage' is assigned a value but never used.","'makeStyles' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.match.params'. Either include it or remove the dependency array.","ArrayExpression",["329"],"'fixedHeightPaper' is assigned a value but never used.","'CodeMirror' is defined but never used.","'open' is assigned a value but never used.","'setOpen' is assigned a value but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","'inputValue' is assigned a value but never used.","'setInputValue' is assigned a value but never used.","'tagWhitelist' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'Pagination' is defined but never used.","'SearchBar' is defined but never used.","'styles' is defined but never used.","'theme' is assigned a value but never used.","'rowsPerPage' is assigned a value but never used.","'totalSpells' is assigned a value but never used.","'setTotalSpells' is assigned a value but never used.","'currentPage' is assigned a value but never used.","'setCurrentPage' is assigned a value but never used.","'search' is assigned a value but never used.","'setSearch' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'drawerWidth' is assigned a value but never used.","no-dupe-keys","Duplicate key 'headBar'.","ObjectExpression","unexpected","Duplicate key 'headLeft'.","Duplicate key 'headTitle'.","Duplicate key 'headRight'.","Duplicate key 'codeMirror'.","Duplicate key 'copy'.","Duplicate key 'cardHead'.","'setCardImage' is assigned a value but never used.","'spellId' is assigned a value but never used.","'setSpellId' is assigned a value but never used.","'useParams' is defined but never used.","'CodeIcon' is defined but never used.","'ListIcon' is defined but never used.","'TwitchIcon' is defined but never used.","'setSpellsPerPage' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'useHistory' is defined but never used.","'clsx' is defined but never used.","'CardHeader' is defined but never used.","'CardActions' is defined but never used.","'SkipPreviousIcon' is defined but never used.","'PlayArrowIcon' is defined but never used.","'SkipNextIcon' is defined but never used.","'MoreVertIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'props.match.params.page'. Either include it or remove the dependency array. If 'setPage' needs the current value of 'props.match.params.page', you can also switch to useReducer instead of useState and read 'props.match.params.page' in the reducer.",["330"],"no-global-assign","no-unsafe-negation",{"desc":"331","fix":"332"},{"desc":"333","fix":"334"},"Update the dependencies array to be: [currentPage, search, path, props.match.params]",{"range":"335","text":"336"},"Update the dependencies array to be: [props.match.params.page]",{"range":"337","text":"338"},[901,928],"[currentPage, search, path, props.match.params]",[1380,1382],"[props.match.params.page]"]