{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/src/Components/Dashboard/SpellChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Title from './Title';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport SpellsApiService from '../../Services/spells-api-service';\nimport { textTrim, SearchBar } from '../../Util.js';\nimport Pagination from '@material-ui/lab/Pagination';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport clsx from 'clsx';\nimport Typography from '@material-ui/core/Typography';\nimport Chip from '@material-ui/core/Chip';\nimport CodeIcon from '@material-ui/icons/Code';\nimport { UnControlled as CodeMirror } from 'react-codemirror2';\nimport LockIcon from '@material-ui/icons/Lock';\nimport TextField from '@material-ui/core/TextField';\nimport Popover from '@material-ui/core/Popover';\nimport useStyles from '../../styles.js';\nimport { SpellChartHeader } from './SpellChartHeader.js';\nimport 'codemirror/addon/edit/matchbrackets.js';\nimport 'codemirror/addon/edit/closebrackets.js';\nimport 'codemirror/addon/selection/active-line.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SpellChart(props) {\n  _s();\n\n  const classes = useStyles();\n  let history = useHistory();\n  const [open, setOpen] = React.useState(false);\n  const [spellsPerPage, setSpellsPerPage] = React.useState(10);\n  const [expanded, setExpanded] = React.useState(false);\n  const [selected, setSelected] = React.useState([]);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [popText, setPopText] = React.useState('Click To Copy');\n\n  const isSpellSelected = id => selected.indexOf(id) !== -1;\n\n  const popoverOpen = Boolean(anchorEl);\n\n  const runSpell = id => {\n    return \"!!run \" + id;\n  };\n\n  const handleExpandClick = id => {\n    setExpanded(id);\n  };\n\n  const handleClickOpen = () => {\n    setOpen(true); // setSpellToDelete(id);\n  };\n\n  const handleClose = () => {\n    setOpen(false); // setSpellToDelete(undefined);\n  };\n\n  const handleSelectAllClick = (event, id) => {\n    if (event.target.checked) {\n      const newSelecteds = props.spells.map(spell => {\n        if (spell.locked) {\n          console.log(spell.locked);\n        } else return spell.id;\n      });\n      setSelected(newSelecteds);\n      return;\n    }\n\n    setSelected([]);\n  };\n\n  const handleClickRow = (event, spell) => {\n    const name = spell.id;\n    const selectedIndex = selected.indexOf(name);\n    let newSelected = []; // Prevent locked spell from being deletable\n\n    if (!spell.locked) {\n      // Selects spell to be deleted\n      if (selectedIndex === -1) {\n        newSelected = newSelected.concat(selected, name);\n      } else if (selectedIndex === 0) {\n        newSelected = newSelected.concat(selected.slice(1));\n      } else if (selectedIndex === selected.length - 1) {\n        newSelected = newSelected.concat(selected.slice(0, -1));\n      } else if (selectedIndex > 0) {\n        newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n      }\n\n      setSelected(newSelected);\n    }\n  };\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = props.orderBy.toLowerCase() === property.toLowerCase() && props.sortDirection === 'asc';\n    props.setSortDirection(isAsc ? 'desc' : 'asc');\n    props.setOrderBy(property.toLowerCase());\n  };\n\n  const updateSpell = spell => {\n    let payload = spell;\n    SpellsApiService.updateSpell(payload, spell.id).then(spell => {\n      props.onChange(spell);\n    });\n  };\n\n  function deleteAllSelected() {\n    SpellsApiService.deleteSpells(selected).then(res => {\n      // Re-request current page of spells\n      props.setRefresh(Math.random());\n      setSelected([]);\n    });\n  }\n\n  const handlePopoverOpen = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handlePopoverClose = () => {\n    setAnchorEl(null);\n    setPopText('Click To Copy');\n  };\n\n  return props.spells ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.headBar,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.headLeft\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.headTitle,\n        children: \"My Spells\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.headRight,\n        children: /*#__PURE__*/_jsxDEV(SearchBar, {\n          setSearch: props.setSearch,\n          setCurrentPage: props.setCurrentPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Toolbar, {\n      className: clsx(classes.spellChartRoot, {\n        [classes.highlight]: selected.length > 0\n      }),\n      children: [selected.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n          title: \"Delete\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": \"delete\",\n            onClick: handleClickOpen,\n            children: /*#__PURE__*/_jsxDEV(DeleteForeverIcon // onClick={deleteAllSelected}\n            , {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n          open: open // open={spellToDelete === spell.id}\n          ,\n          onClose: () => handleClose(),\n          \"aria-labelledby\": \"alert-dialog-title\",\n          \"aria-describedby\": \"alert-dialog-description\",\n          children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n            id: \"alert-dialog-title\",\n            children: \"Delete spell?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n            children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n              id: \"alert-dialog-description\",\n              children: \"Are you sure you would like to delete this spell?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => {\n                handleClose();\n                deleteAllSelected();\n              },\n              color: \"secondary\",\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: handleClose,\n              color: \"primary\",\n              autoFocus: true,\n              children: \"Keep\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.title,\n        variant: \"h6\",\n        id: \"tableTitle\",\n        component: \"div\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this), selected.length > 0 ? /*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.title,\n        color: \"inherit\",\n        variant: \"subtitle1\",\n        component: \"div\",\n        children: [selected.length, \" selected\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.title,\n        variant: \"h6\",\n        id: \"tableTitle\",\n        component: \"div\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      className: classes.container,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        size: \"small\",\n        padding: \"none\",\n        stickyHeader: true,\n        \"aria-label\": \"sticky table\",\n        children: [/*#__PURE__*/_jsxDEV(SpellChartHeader, {\n          classes: classes,\n          numSelected: selected.length,\n          sortDirection: props.sortDirection,\n          orderBy: props.orderBy,\n          onSelectAllClick: handleSelectAllClick,\n          onRequestSort: handleRequestSort,\n          spells: props.spells,\n          spellsPerPage: spellsPerPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: props.spells.map(spell => /*#__PURE__*/_jsxDEV(TableRow, {\n            hover: true,\n            onClick: event => handleClickRow(event, spell),\n            selected: selected.indexOf(spell.id) !== -1,\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              padding: \"checkbox\",\n              children: spell.locked ? '' : /*#__PURE__*/_jsxDEV(Checkbox, {\n                checked: isSpellSelected(spell.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              title: new Date(Date.parse(spell.date_created)).toLocaleTimeString(),\n              arrow: true,\n              placement: \"bottom-start\",\n              children: /*#__PURE__*/_jsxDEV(TableCell, {\n                children: new Date(Date.parse(spell.date_created)).toLocaleDateString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              title: new Date(Date.parse(spell.date_modified)).toLocaleTimeString(),\n              arrow: true,\n              placement: \"bottom-start\",\n              children: /*#__PURE__*/_jsxDEV(TableCell, {\n                children: new Date(Date.parse(spell.date_modified)).toLocaleDateString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: textTrim(spell.name, 15)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: textTrim(spell.description, 30)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              width: \"40%\",\n              children: spell.tags.length ? spell.tags.map(t => /*#__PURE__*/_jsxDEV(Chip, {\n                variant: \"outlined\",\n                size: \"small\",\n                label: t.name,\n                onClick: event => {\n                  event.stopPropagation();\n                }\n              }, t.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 21\n              }, this)) : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              className: classes.icons,\n              children: [/*#__PURE__*/_jsxDEV(IconButton, {\n                className: clsx(classes.expand, {\n                  [classes.expandOpen]: expanded == spell.id\n                }),\n                onClick: event => {\n                  handleExpandClick(spell.id);\n                  event.stopPropagation();\n                },\n                \"aria-expanded\": expanded == spell.id,\n                \"aria-label\": \"show more\",\n                children: /*#__PURE__*/_jsxDEV(Tooltip, {\n                  title: \"View Code\",\n                  placement: \"top\",\n                  children: /*#__PURE__*/_jsxDEV(CodeIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 268,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 267,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n                open: expanded == spell.id,\n                onClose: event => {\n                  handleExpandClick(false);\n                },\n                onClick: event => {\n                  event.stopPropagation();\n                },\n                \"aria-labelledby\": \"alert-dialog-title\",\n                \"aria-describedby\": \"alert-dialog-description\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: classes.cardHead,\n                  children: /*#__PURE__*/_jsxDEV(DialogTitle, {\n                    id: \"alert-dialog-title\",\n                    children: `${spell.name}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 283,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 282,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: classes.cardHead,\n                  children: [/*#__PURE__*/_jsxDEV(TextField, {\n                    size: \"small\",\n                    className: classes.copy,\n                    id: \"read-only-twitch-command\",\n                    label: \"Twitch Dictum\",\n                    defaultValue: runSpell(spell.id),\n                    InputProps: {\n                      readOnly: true\n                    },\n                    variant: \"outlined\",\n                    \"aria-owns\": popoverOpen ? 'mouse-over-popover' : undefined,\n                    \"aria-haspopup\": \"true\",\n                    onMouseEnter: handlePopoverOpen,\n                    onMouseLeave: handlePopoverClose,\n                    onClick: () => {\n                      navigator.clipboard.writeText(runSpell(spell.id));\n                      setPopText('Copied!');\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 286,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Popover, {\n                    id: \"mouse-over-popover\",\n                    className: classes.popover,\n                    classes: {\n                      paper: classes.paper\n                    },\n                    open: popoverOpen,\n                    anchorEl: anchorEl,\n                    anchorOrigin: {\n                      vertical: 'bottom',\n                      horizontal: 'left'\n                    },\n                    transformOrigin: {\n                      vertical: 'top',\n                      horizontal: 'left'\n                    },\n                    onClose: handlePopoverClose,\n                    disableRestoreFocus: true,\n                    children: /*#__PURE__*/_jsxDEV(Typography, {\n                      children: popText\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 324,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 305,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 285,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n                  className: \"dialogBox\",\n                  children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n                    id: \"CodeMirror-Display\",\n                    children: /*#__PURE__*/_jsxDEV(CodeMirror, {\n                      className: classes.codeMirror,\n                      value: spell.text,\n                      options: {\n                        lineWrapping: true,\n                        mode: 'scheme',\n                        theme: 'material',\n                        lineNumbers: true,\n                        matchBrackets: true,\n                        autoCloseBrackets: true,\n                        styleActiveLine: true\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 329,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 328,\n                    columnNumber: 23\n                  }, this), \"Edited code will not be saved\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 327,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: spell.locked ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  className: classes.icons,\n                  children: /*#__PURE__*/_jsxDEV(IconButton, {\n                    \"aria-label\": \"details\",\n                    onClick: () => history.push(`/spells/${spell.id}`),\n                    children: /*#__PURE__*/_jsxDEV(LockIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 353,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 352,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 351,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  className: classes.icons,\n                  children: /*#__PURE__*/_jsxDEV(IconButton, {\n                    id: spell.id,\n                    \"aria-label\": \"isPublic\",\n                    disabled: true,\n                    children: spell.is_public ? /*#__PURE__*/_jsxDEV(VisibilityIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 362,\n                      columnNumber: 44\n                    }, this) : /*#__PURE__*/_jsxDEV(VisibilityOffIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 362,\n                      columnNumber: 65\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 357,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 356,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  className: classes.icons,\n                  children: /*#__PURE__*/_jsxDEV(IconButton, {\n                    \"aria-label\": \"edit\",\n                    onClick: () => history.push(`/spells/${spell.id}`),\n                    children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 370,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 369,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 368,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  className: classes.icons,\n                  children: /*#__PURE__*/_jsxDEV(IconButton, {\n                    id: spell.id,\n                    \"aria-label\": \"isPublic\",\n                    onClick: event => {\n                      updateSpell({ ...spell,\n                        is_public: !spell.is_public\n                      });\n                      event.stopPropagation();\n                    },\n                    children: spell.is_public ? /*#__PURE__*/_jsxDEV(VisibilityIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 381,\n                      columnNumber: 42\n                    }, this) : /*#__PURE__*/_jsxDEV(VisibilityOffIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 381,\n                      columnNumber: 63\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 374,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 373,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true)\n            }, void 0, false)]\n          }, \"Key: \" + spell.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.pagi,\n      children: /*#__PURE__*/_jsxDEV(Pagination, {\n        count: Math.ceil(props.totalSpells / spellsPerPage),\n        onChange: (event, page) => {\n          props.setCurrentPage(page);\n          setSelected([]);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this) : '';\n}\n\n_s(SpellChart, \"2E6O+uWhgtDn8vVT2cDy7omNC6c=\", false, function () {\n  return [useStyles, useHistory];\n});\n\n_c = SpellChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpellChart\");","map":{"version":3,"sources":["/usr/src/app/src/Components/Dashboard/SpellChart.js"],"names":["React","useEffect","useHistory","Table","TableBody","TableCell","TableRow","Title","Button","IconButton","EditIcon","DeleteForeverIcon","VisibilityIcon","VisibilityOffIcon","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Tooltip","SpellsApiService","textTrim","SearchBar","Pagination","TableContainer","Checkbox","Toolbar","clsx","Typography","Chip","CodeIcon","UnControlled","CodeMirror","LockIcon","TextField","Popover","useStyles","SpellChartHeader","SpellChart","props","classes","history","open","setOpen","useState","spellsPerPage","setSpellsPerPage","expanded","setExpanded","selected","setSelected","anchorEl","setAnchorEl","popText","setPopText","isSpellSelected","id","indexOf","popoverOpen","Boolean","runSpell","handleExpandClick","handleClickOpen","handleClose","handleSelectAllClick","event","target","checked","newSelecteds","spells","map","spell","locked","console","log","handleClickRow","name","selectedIndex","newSelected","concat","slice","length","handleRequestSort","property","isAsc","orderBy","toLowerCase","sortDirection","setSortDirection","setOrderBy","updateSpell","payload","then","onChange","deleteAllSelected","deleteSpells","res","setRefresh","Math","random","handlePopoverOpen","currentTarget","handlePopoverClose","headBar","headLeft","headTitle","headRight","setSearch","setCurrentPage","spellChartRoot","highlight","title","container","Date","parse","date_created","toLocaleTimeString","toLocaleDateString","date_modified","description","tags","t","stopPropagation","icons","expand","expandOpen","cardHead","copy","readOnly","undefined","navigator","clipboard","writeText","popover","paper","vertical","horizontal","codeMirror","text","lineWrapping","mode","theme","lineNumbers","matchBrackets","autoCloseBrackets","styleActiveLine","push","is_public","pagi","ceil","totalSpells","page"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Title from './Title';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport SpellsApiService from '../../Services/spells-api-service';\nimport {textTrim, SearchBar} from '../../Util.js'\nimport Pagination from '@material-ui/lab/Pagination';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport clsx from 'clsx';\nimport Typography from '@material-ui/core/Typography';\nimport Chip from '@material-ui/core/Chip';\nimport CodeIcon from '@material-ui/icons/Code';\nimport {UnControlled as CodeMirror} from 'react-codemirror2';\nimport LockIcon from '@material-ui/icons/Lock';\nimport TextField from '@material-ui/core/TextField';\nimport Popover from '@material-ui/core/Popover';\nimport useStyles from '../../styles.js';\nimport { SpellChartHeader } from './SpellChartHeader.js';\nimport 'codemirror/addon/edit/matchbrackets.js'\nimport 'codemirror/addon/edit/closebrackets.js'\nimport 'codemirror/addon/selection/active-line.js'\n\nexport default function SpellChart(props) {\n  const classes = useStyles();\n  let history = useHistory();\n\n  const [open, setOpen] = React.useState(false);\n  const [spellsPerPage, setSpellsPerPage] = React.useState(10);\n  const [expanded, setExpanded] = React.useState(false);\n  const [selected, setSelected] = React.useState([]);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [popText, setPopText] = React.useState('Click To Copy')\n  \n  const isSpellSelected = (id) => selected.indexOf(id) !== -1;\n  const popoverOpen = Boolean(anchorEl);\n\n  const runSpell = (id) => {\n    return \"!!run \" + id\n  }\n\n  const handleExpandClick = (id) => {\n    setExpanded(id);\n  };\n\n  const handleClickOpen = () => {\n    setOpen(true);\n    // setSpellToDelete(id);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    // setSpellToDelete(undefined);\n  };\n\n  const handleSelectAllClick = (event, id) => {\n    if (event.target.checked) {\n      const newSelecteds = props.spells\n        .map((spell) => {\n          if (spell.locked) {\n            console.log(spell.locked)\n          } else return spell.id\n        })\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleClickRow = (event, spell) => {\n    const name = spell.id\n    const selectedIndex = selected.indexOf(name);\n    let newSelected = [];\n    // Prevent locked spell from being deletable\n    if (!spell.locked) {\n      // Selects spell to be deleted\n      if (selectedIndex === -1) {\n        newSelected = newSelected.concat(selected, name);\n      } else if (selectedIndex === 0) {\n        newSelected = newSelected.concat(selected.slice(1));\n      } else if (selectedIndex === selected.length - 1) {\n        newSelected = newSelected.concat(selected.slice(0, -1));\n      } else if (selectedIndex > 0) {\n        newSelected = newSelected.concat(\n          selected.slice(0, selectedIndex),\n          selected.slice(selectedIndex + 1),\n        );\n      }\n      setSelected(newSelected);\n    }\n  };\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = props.orderBy.toLowerCase() === property.toLowerCase() && props.sortDirection === 'asc';\n    props.setSortDirection(isAsc ? 'desc' : 'asc');\n    props.setOrderBy(property.toLowerCase());\n  };\n\n  const updateSpell = (spell) => {\n    let payload = spell\n\n    SpellsApiService.updateSpell(payload, spell.id)\n      .then((spell) => {\n        props.onChange(spell)\n      })\n  }\n\n  function deleteAllSelected() {\n    SpellsApiService.deleteSpells(selected)\n      .then(res => {\n        // Re-request current page of spells\n        props.setRefresh(Math.random())\n        setSelected([])\n      })\n  }\n  \n  const handlePopoverOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handlePopoverClose = () => {\n    setAnchorEl(null);\n    setPopText('Click To Copy')\n  }\n\n  return (\n    props.spells ?\n    <React.Fragment>\n      <div className={classes.headBar}>\n        <div className={classes.headLeft}></div>\n        <div className={classes.headTitle}>My Spells</div>\n        <div className={classes.headRight}>\n          <SearchBar \n            setSearch={props.setSearch}\n            setCurrentPage={props.setCurrentPage} \n          />\n        </div>\n      </div>\n      <Toolbar\n        className={clsx(classes.spellChartRoot, {\n          [classes.highlight]: selected.length > 0,\n        })}\n      >\n        {selected.length > 0 ? (\n          <>\n          <Tooltip title=\"Delete\">\n            <IconButton aria-label=\"delete\" onClick={handleClickOpen}> \n              <DeleteForeverIcon \n                // onClick={deleteAllSelected}\n              />\n            </IconButton>\n          </Tooltip>\n            <Dialog \n              open={open}\n              // open={spellToDelete === spell.id}\n              onClose={() => handleClose()}\n              aria-labelledby=\"alert-dialog-title\"\n              aria-describedby=\"alert-dialog-description\"\n            >\n              <DialogTitle id=\"alert-dialog-title\">{\"Delete spell?\"}</DialogTitle>\n              <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">\n                  Are you sure you would like to delete this spell?\n                </DialogContentText>\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={() => {handleClose(); deleteAllSelected()}} color=\"secondary\">\n                  Delete\n                </Button>\n                <Button onClick={handleClose} color=\"primary\" autoFocus>\n                  Keep\n                </Button>\n              </DialogActions>\n            </Dialog>\n          </>\n        ) : (\n          <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n          </Typography>\n        )}\n        {selected.length > 0 ? (\n          <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n            {selected.length} selected\n          </Typography>\n        ) : (\n          <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n          </Typography>\n        )}\n      </Toolbar>\n      <TableContainer className={classes.container}>\n        <Table size='small' padding='none' stickyHeader aria-label=\"sticky table\"> \n          <SpellChartHeader\n            classes={classes}\n            numSelected={selected.length}\n            sortDirection={props.sortDirection}\n            orderBy={props.orderBy}\n            onSelectAllClick={handleSelectAllClick}\n            onRequestSort={handleRequestSort}\n            spells={props.spells}\n            spellsPerPage={spellsPerPage}\n          />\n          <TableBody>\n            {props.spells.map((spell) => (\n              <TableRow \n                hover \n                key={\"Key: \" + spell.id}\n                onClick={(event) => handleClickRow(event, spell)}\n                selected={selected.indexOf(spell.id) !== -1}\n              >\n                <TableCell padding=\"checkbox\">\n                  {spell.locked ?\n                  ''\n                  :\n                  <Checkbox\n                    checked={isSpellSelected(spell.id)}\n                  />\n                  }\n                </TableCell>\n                <Tooltip title={new Date(Date.parse(spell.date_created)).toLocaleTimeString()} arrow placement=\"bottom-start\">\n                  <TableCell>{new Date(Date.parse(spell.date_created)).toLocaleDateString()}</TableCell>\n                </Tooltip>\n                <Tooltip title={new Date(Date.parse(spell.date_modified)).toLocaleTimeString()} arrow placement=\"bottom-start\">\n                  <TableCell>{new Date(Date.parse(spell.date_modified)).toLocaleDateString()}</TableCell>\n                </Tooltip>\n                <TableCell>{textTrim(spell.name, 15)}</TableCell>\n                <TableCell>{textTrim(spell.description, 30)}</TableCell>\n                <TableCell width='40%'>{spell.tags.length ? \n                  spell.tags.map(t => (\n                    <Chip\n                      key={t.id}\n                      variant=\"outlined\"\n                      size=\"small\"\n                      label={t.name}\n                      onClick={(event) => {\n                        event.stopPropagation();\n                      }}\n                    />\n                  )) : ''}\n                </TableCell>\n                <TableCell className={classes.icons}>\n                  <IconButton\n                    className={clsx(classes.expand, {\n                      [classes.expandOpen]: expanded == spell.id,\n                    })}\n                    onClick={(event) => {\n                      handleExpandClick(spell.id)\n                      event.stopPropagation();\n                    }}\n                    aria-expanded={expanded == spell.id}\n                    aria-label=\"show more\"\n                  >\n                    <Tooltip title=\"View Code\" placement=\"top\">\n                      <CodeIcon />\n                    </Tooltip>\n                  </IconButton>\n                  <Dialog\n                    open={expanded == spell.id}\n                    onClose={(event) => {\n                      handleExpandClick(false)\n                    }}\n                    onClick={(event) => {\n                      event.stopPropagation();\n                    }}\n                    aria-labelledby=\"alert-dialog-title\"\n                    aria-describedby=\"alert-dialog-description\"\n                  >\n                    <div className={classes.cardHead}>\n                      <DialogTitle id=\"alert-dialog-title\">{`${spell.name}`}</DialogTitle>\n                    </div>\n                    <div className={classes.cardHead}>\n                      <TextField\n                        size=\"small\"\n                        className={classes.copy}\n                        id=\"read-only-twitch-command\"\n                        label=\"Twitch Dictum\"\n                        defaultValue= {runSpell(spell.id)}\n                        InputProps={{\n                          readOnly: true,\n                        }}\n                        variant=\"outlined\"\n                        aria-owns={popoverOpen ? 'mouse-over-popover' : undefined}\n                        aria-haspopup=\"true\"\n                        onMouseEnter={handlePopoverOpen}\n                        onMouseLeave={handlePopoverClose}\n                        onClick={() => {\n                          navigator.clipboard.writeText(runSpell(spell.id))\n                          setPopText('Copied!')\n                        }}\n                      />\n                      <Popover\n                        id=\"mouse-over-popover\"\n                        className={classes.popover}\n                        classes={{\n                          paper: classes.paper,\n                        }}\n                        open={popoverOpen}\n                        anchorEl={anchorEl}\n                        anchorOrigin={{\n                          vertical: 'bottom',\n                          horizontal: 'left',\n                        }}\n                        transformOrigin={{\n                          vertical: 'top',\n                          horizontal: 'left',\n                        }}\n                        onClose={handlePopoverClose}\n                        disableRestoreFocus\n                      >\n                        <Typography>{popText}</Typography>\n                      </Popover>\n                    </div>\n                    <DialogContent className=\"dialogBox\">\n                      <DialogContentText id=\"CodeMirror-Display\">\n                        <CodeMirror\n                          className={classes.codeMirror}\n                          value={spell.text}\n                          options={{\n                            lineWrapping: true,\n                            mode: 'scheme',\n                            theme: 'material',\n                            lineNumbers: true,\n                            matchBrackets: true,\n                            autoCloseBrackets: true,\n                            styleActiveLine: true,\n                          }}\n                        />\n                      </DialogContentText>\n                      Edited code will not be saved\n                    </DialogContent>\n                  </Dialog>\n                </TableCell>\n                <>\n                {spell.locked ? \n                  <>\n                    \n                    <TableCell className={classes.icons}>\n                      <IconButton aria-label=\"details\" onClick={() => history.push(`/spells/${spell.id}`)}>\n                        <LockIcon />\n                      </IconButton>\n                    </TableCell>\n                    <TableCell className={classes.icons}>\n                      <IconButton \n                        id={spell.id} \n                        aria-label=\"isPublic\" \n                        disabled\n                      >\n                        {spell.is_public ? <VisibilityIcon /> : <VisibilityOffIcon />}\n                      </IconButton>\n                    </TableCell>\n                  </>\n                  :\n                  <>\n                  <TableCell className={classes.icons}>\n                    <IconButton aria-label=\"edit\" onClick={() => history.push(`/spells/${spell.id}`)}>\n                      <EditIcon />\n                    </IconButton>\n                  </TableCell>\n                  <TableCell className={classes.icons}>\n                    <IconButton \n                      id={spell.id} \n                      aria-label=\"isPublic\" \n                      onClick={(event) => {\n                        updateSpell({...spell, is_public: !spell.is_public});\n                        event.stopPropagation();\n                    }}>\n                      {spell.is_public ? <VisibilityIcon /> : <VisibilityOffIcon />}\n                    </IconButton>\n                  </TableCell>\n                  </>\n                }\n                </>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      {/* {console.log(props.spells)} */}\n        <div className={classes.pagi}>\n          <Pagination count={Math.ceil(props.totalSpells / spellsPerPage)}\n            onChange={(event, page) => {\n              props.setCurrentPage(page)\n              setSelected([])\n            }}\n          />\n        </div>\n    </React.Fragment>\n    : ''\n  );\n}"]},"metadata":{},"sourceType":"module"}