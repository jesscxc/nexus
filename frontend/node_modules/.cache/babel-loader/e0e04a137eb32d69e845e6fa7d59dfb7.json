{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/src/Components/Dashboard/Downloads.js\",\n    _s = $RefreshSig$();\n\n// DownloadCards\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport DownloadCard from './DownloadCard';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport Pagination from '@material-ui/lab/Pagination';\nimport { SearchBar } from '../../Util.js';\nimport SpellsApiService from '../../Services/spells-api-service';\nimport Title from './Title';\nimport styles from '../../styles.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Downloads() {\n  _s();\n\n  const classes = useStyles();\n  const theme = useTheme();\n  const [rowsPerPage, setRowsPerPage] = React.useState(9);\n  const [totalSpells, setTotalSpells] = React.useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [search, setSearch] = React.useState('');\n  const [games, setGames] = React.useState([]);\n  const [totalGames, setTotalGames] = React.useState(0);\n  useEffect(() => {\n    SpellsApiService.getDownloads().then(games => {\n      setGames(games.games);\n      setTotalGames(games.total);\n    });\n  }, []);\n  console.log(games, totalGames);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.headBar,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.headLeft\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Title, {\n        className: classes.headTitle,\n        children: \"Downloads\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      className: classes.cardGrid,\n      maxWidth: \"md\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 4,\n        children: games.map(game => /*#__PURE__*/_jsxDEV(DownloadCard, {\n          game: game\n        }, ('Key ', game.id), false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Downloads, \"4eTnrsRlHvDZszSSzIHRiGHt8sw=\", false, function () {\n  return [useStyles, useTheme];\n});\n\n_c = Downloads;\nexport default Downloads;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex'\n  },\n  details: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  content: {\n    flex: '1 0 auto'\n  },\n  cover: {\n    width: 151\n  },\n  controls: {\n    display: 'flex',\n    alignItems: 'center',\n    paddingLeft: theme.spacing(1),\n    paddingBottom: theme.spacing(1)\n  },\n  playIcon: {\n    height: 38,\n    width: 38\n  },\n  spellcardCard: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  }\n}));\n\nvar _c;\n\n$RefreshReg$(_c, \"Downloads\");","map":{"version":3,"sources":["/usr/src/app/src/Components/Dashboard/Downloads.js"],"names":["React","useState","useEffect","makeStyles","useTheme","DownloadCard","Grid","Container","Pagination","SearchBar","SpellsApiService","Title","styles","Downloads","classes","useStyles","theme","rowsPerPage","setRowsPerPage","totalSpells","setTotalSpells","currentPage","setCurrentPage","search","setSearch","games","setGames","totalGames","setTotalGames","getDownloads","then","total","console","log","headBar","headLeft","headTitle","cardGrid","map","game","id","root","display","details","flexDirection","content","flex","cover","width","controls","alignItems","paddingLeft","spacing","paddingBottom","playIcon","height","spellcardCard","paddingTop"],"mappings":"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","sourcesContent":["// DownloadCards\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport DownloadCard from './DownloadCard'\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport Pagination from '@material-ui/lab/Pagination';\nimport { SearchBar } from '../../Util.js'\nimport SpellsApiService from '../../Services/spells-api-service';\nimport Title from './Title';\nimport styles from '../../styles.js'\n\nfunction Downloads() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [rowsPerPage, setRowsPerPage] = React.useState(9);\n  const [totalSpells, setTotalSpells] = React.useState(0);\n  const [currentPage, setCurrentPage] = useState(1)\n  const [search, setSearch] = React.useState('');\n  const [games, setGames] = React.useState([]);\n  const [totalGames, setTotalGames] = React.useState(0);\n    \n  useEffect(() => {\n    SpellsApiService.getDownloads()\n      .then(games => {\n        setGames(games.games)\n        setTotalGames(games.total)\n      })\n  }, [])\n\n  console.log(games, totalGames)\n\n  return (\n    <>\n      <div className={classes.headBar}>\n        <div className={classes.headLeft}></div>\n        <Title className={classes.headTitle}>Downloads</Title>\n        {/* <div className={classes.headRight}><SearchBar setSearch={setSearch} setCurrentPage={setCurrentPage}/></div> */}\n      </div>\n      \n      <Container className={classes.cardGrid} maxWidth=\"md\">\n        <Grid container spacing={4}>\n          {games.map((game) => (\n            <DownloadCard game={game} key={'Key ', game.id}/>\n          ))}\n        </Grid>\n      </Container>\n      \n      {/* <div className={classes.publicSpellsRoot}>\n        <Pagination count={Math.ceil(totalSpells / rowsPerPage)}\n          onChange={(event, page) => {setCurrentPage(page)}}\n        />\n      </div> */}\n    </>\n  );\n}\nexport default Downloads;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  details: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    flex: '1 0 auto',\n  },\n  cover: {\n    width: 151,\n  },\n  controls: {\n    display: 'flex',\n    alignItems: 'center',\n    paddingLeft: theme.spacing(1),\n    paddingBottom: theme.spacing(1),\n  },\n  playIcon: {\n    height: 38,\n    width: 38,\n  },\n  spellcardCard: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n}));"]},"metadata":{},"sourceType":"module"}