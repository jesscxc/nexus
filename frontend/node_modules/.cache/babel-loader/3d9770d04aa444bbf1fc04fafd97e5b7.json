{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/src/Components/Dashboard/SpellIndex.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport SpellChart from './SpellChart';\nimport Dashboard from './Dashboard';\nimport SpellsApiService from '../../Services/spells-api-service';\nimport FabAddIcon from './FabAddIcon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SpellIndex(props) {\n  _s();\n\n  const [spells, setSpells] = useState([]);\n  const [totalSpells, setTotalSpells] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [refresh, setRefresh] = useState(0);\n  const [search, setSearch] = React.useState('');\n  const [sortDirection, setSortDirection] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('');\n  let history = useHistory();\n  useEffect(() => {\n    SpellsApiService.getUserById('me').then(user => props.setIsLoggedIn(true)).catch(() => props.setIsLoggedIn(false));\n\n    if (props.isLoggedIn) {\n      SpellsApiService.getSpellsByUser(history, currentPage, search, sortDirection, orderBy).then(spells => {\n        setSpells(spells.spells);\n        setTotalSpells(spells.total);\n      });\n    }\n  }, [currentPage, refresh, search, sortDirection, orderBy, props, history]);\n\n  function createSpell(event) {\n    SpellsApiService.postNewSpell().then(spell => {\n      setSpells([...spells, spell]);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(Dashboard, {\n    spells: spells,\n    setSpells: setSpells,\n    createSpell: createSpell,\n    child: /*#__PURE__*/_jsxDEV(SpellChart, {\n      setCurrentPage: setCurrentPage,\n      setSearch: setSearch,\n      setSortDirection: setSortDirection,\n      sortDirection: sortDirection,\n      orderBy: orderBy,\n      setOrderBy: setOrderBy,\n      spells: spells,\n      totalSpells: totalSpells,\n      onChange: changedSpell => setSpells(spells.map(spell => changedSpell.id === spell.id ? changedSpell : spell)),\n      onDelete: deletedSpellID => setSpells(spells.filter(spell => spell.id !== deletedSpellID)),\n      setRefresh: setRefresh\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 14\n    }, this),\n    fabIcon: /*#__PURE__*/_jsxDEV(FabAddIcon, {\n      spells: spells,\n      setSpells: setSpells,\n      clickIcon: createSpell\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 16\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SpellIndex, \"bjfRIfLGe/H7JaakFvhb4vmCMno=\", false, function () {\n  return [useHistory];\n});\n\n_c = SpellIndex;\nexport default SpellIndex;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpellIndex\");","map":{"version":3,"sources":["/usr/src/app/src/Components/Dashboard/SpellIndex.js"],"names":["React","useEffect","useState","useHistory","SpellChart","Dashboard","SpellsApiService","FabAddIcon","SpellIndex","props","spells","setSpells","totalSpells","setTotalSpells","currentPage","setCurrentPage","refresh","setRefresh","search","setSearch","sortDirection","setSortDirection","orderBy","setOrderBy","history","getUserById","then","user","setIsLoggedIn","catch","isLoggedIn","getSpellsByUser","total","createSpell","event","postNewSpell","spell","changedSpell","map","id","deletedSpellID","filter"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport SpellChart from './SpellChart';\nimport Dashboard from './Dashboard';\nimport SpellsApiService from '../../Services/spells-api-service';\nimport FabAddIcon from './FabAddIcon';\n\nfunction SpellIndex(props) {\n  const [spells, setSpells] = useState([])\n  const [totalSpells, setTotalSpells] = useState(0)\n  const [currentPage, setCurrentPage] = useState(1)\n  const [refresh, setRefresh] = useState(0);\n  const [search, setSearch] = React.useState('');\n  const [sortDirection, setSortDirection] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('');\n  let history = useHistory();\n  \n  useEffect(() => {\n    SpellsApiService.getUserById('me')\n      .then((user) => props.setIsLoggedIn(true))\n      .catch(() => props.setIsLoggedIn(false))\n\n    if(props.isLoggedIn){\n      SpellsApiService.getSpellsByUser(history, currentPage, search, sortDirection, orderBy)\n        .then(spells => {\n          setSpells(spells.spells)\n          setTotalSpells(spells.total)\n        })\n    }\n  }, [currentPage, refresh, search, sortDirection, orderBy, props, history])\n\n  function createSpell(event) {\n    SpellsApiService.postNewSpell()\n      .then(spell => {\n        setSpells([...spells, spell])\n      })\n  }\n\n  return (\n    <Dashboard\n      spells={spells}\n      setSpells={setSpells}\n      createSpell={createSpell}\n      child={<SpellChart\n        setCurrentPage={setCurrentPage}\n        setSearch={setSearch}\n        setSortDirection={setSortDirection}\n        sortDirection={sortDirection}\n        orderBy={orderBy}\n        setOrderBy={setOrderBy}\n        spells={spells}\n        totalSpells={totalSpells}\n        onChange={(changedSpell) => setSpells(spells.map(spell => changedSpell.id === spell.id ? changedSpell : spell))}\n        onDelete={(deletedSpellID) => setSpells(spells.filter(spell => spell.id !== deletedSpellID))}\n        setRefresh={setRefresh}\n      />}\n      fabIcon={<FabAddIcon\n        spells={spells}\n        setSpells={setSpells}\n        clickIcon={createSpell}\n      />}\n    >\n    </Dashboard>\n  )\n}\n\nexport default SpellIndex;\n"]},"metadata":{},"sourceType":"module"}